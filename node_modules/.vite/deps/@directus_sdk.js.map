{
  "version": 3,
  "sources": ["../../@directus/sdk/src/client.ts", "../../@directus/sdk/src/utils/is-response.ts", "../../@directus/sdk/src/utils/extract-data.ts", "../../@directus/sdk/src/utils/request.ts", "../../@directus/sdk/src/graphql/composable.ts", "../../@directus/sdk/src/rest/commands/auth/login.ts", "../../@directus/sdk/src/rest/commands/auth/logout.ts", "../../@directus/sdk/src/rest/commands/auth/password-request.ts", "../../@directus/sdk/src/rest/commands/auth/password-reset.ts", "../../@directus/sdk/src/rest/commands/auth/providers.ts", "../../@directus/sdk/src/rest/commands/auth/refresh.ts", "../../@directus/sdk/src/rest/commands/create/activity.ts", "../../@directus/sdk/src/rest/commands/create/collections.ts", "../../@directus/sdk/src/rest/commands/create/dashboards.ts", "../../@directus/sdk/src/rest/commands/create/fields.ts", "../../@directus/sdk/src/rest/commands/create/files.ts", "../../@directus/sdk/src/rest/commands/create/flows.ts", "../../@directus/sdk/src/rest/commands/create/folders.ts", "../../@directus/sdk/src/rest/commands/create/items.ts", "../../@directus/sdk/src/rest/commands/create/notifications.ts", "../../@directus/sdk/src/rest/commands/create/operations.ts", "../../@directus/sdk/src/rest/commands/create/panels.ts", "../../@directus/sdk/src/rest/commands/create/permissions.ts", "../../@directus/sdk/src/rest/commands/create/presets.ts", "../../@directus/sdk/src/rest/commands/create/relations.ts", "../../@directus/sdk/src/rest/commands/create/roles.ts", "../../@directus/sdk/src/rest/commands/create/shares.ts", "../../@directus/sdk/src/rest/commands/create/translations.ts", "../../@directus/sdk/src/rest/commands/create/users.ts", "../../@directus/sdk/src/rest/commands/create/versions.ts", "../../@directus/sdk/src/rest/commands/create/webhooks.ts", "../../@directus/sdk/src/rest/commands/delete/activity.ts", "../../@directus/sdk/src/rest/commands/delete/collections.ts", "../../@directus/sdk/src/rest/utils/query-to-params.ts", "../../@directus/sdk/src/rest/utils/throw-if-empty.ts", "../../@directus/sdk/src/rest/utils/throw-core-collection.ts", "../../@directus/sdk/src/rest/commands/delete/dashboards.ts", "../../@directus/sdk/src/rest/commands/delete/fields.ts", "../../@directus/sdk/src/rest/commands/delete/files.ts", "../../@directus/sdk/src/rest/commands/delete/flows.ts", "../../@directus/sdk/src/rest/commands/delete/folders.ts", "../../@directus/sdk/src/rest/commands/delete/items.ts", "../../@directus/sdk/src/rest/commands/delete/notifications.ts", "../../@directus/sdk/src/rest/commands/delete/operations.ts", "../../@directus/sdk/src/rest/commands/delete/panels.ts", "../../@directus/sdk/src/rest/commands/delete/permissions.ts", "../../@directus/sdk/src/rest/commands/delete/presets.ts", "../../@directus/sdk/src/rest/commands/delete/relations.ts", "../../@directus/sdk/src/rest/commands/delete/roles.ts", "../../@directus/sdk/src/rest/commands/delete/shares.ts", "../../@directus/sdk/src/rest/commands/delete/translations.ts", "../../@directus/sdk/src/rest/commands/delete/users.ts", "../../@directus/sdk/src/rest/commands/delete/versions.ts", "../../@directus/sdk/src/rest/commands/delete/webhooks.ts", "../../@directus/sdk/src/rest/commands/read/activity.ts", "../../@directus/sdk/src/rest/commands/read/aggregate.ts", "../../@directus/sdk/src/rest/commands/read/assets.ts", "../../@directus/sdk/src/rest/commands/read/collections.ts", "../../@directus/sdk/src/rest/commands/read/dashboards.ts", "../../@directus/sdk/src/rest/commands/read/extensions.ts", "../../@directus/sdk/src/rest/commands/read/fields.ts", "../../@directus/sdk/src/rest/commands/read/files.ts", "../../@directus/sdk/src/rest/commands/read/flows.ts", "../../@directus/sdk/src/rest/commands/read/folders.ts", "../../@directus/sdk/src/rest/commands/read/items.ts", "../../@directus/sdk/src/rest/commands/read/notifications.ts", "../../@directus/sdk/src/rest/commands/read/operations.ts", "../../@directus/sdk/src/rest/commands/read/panels.ts", "../../@directus/sdk/src/rest/commands/read/permissions.ts", "../../@directus/sdk/src/rest/commands/read/presets.ts", "../../@directus/sdk/src/rest/commands/read/relations.ts", "../../@directus/sdk/src/rest/commands/read/revisions.ts", "../../@directus/sdk/src/rest/commands/read/roles.ts", "../../@directus/sdk/src/rest/commands/read/settings.ts", "../../@directus/sdk/src/rest/commands/read/shares.ts", "../../@directus/sdk/src/rest/commands/read/singleton.ts", "../../@directus/sdk/src/rest/commands/read/translations.ts", "../../@directus/sdk/src/rest/commands/read/users.ts", "../../@directus/sdk/src/rest/commands/read/versions.ts", "../../@directus/sdk/src/rest/commands/read/webhooks.ts", "../../@directus/sdk/src/rest/commands/schema/apply.ts", "../../@directus/sdk/src/rest/commands/schema/diff.ts", "../../@directus/sdk/src/rest/commands/schema/snapshot.ts", "../../@directus/sdk/src/rest/commands/server/graphql.ts", "../../@directus/sdk/src/rest/commands/server/health.ts", "../../@directus/sdk/src/rest/commands/server/info.ts", "../../@directus/sdk/src/rest/commands/server/openapi.ts", "../../@directus/sdk/src/rest/commands/server/ping.ts", "../../@directus/sdk/src/rest/commands/update/activity.ts", "../../@directus/sdk/src/rest/commands/update/collections.ts", "../../@directus/sdk/src/rest/commands/update/dashboards.ts", "../../@directus/sdk/src/rest/commands/update/fields.ts", "../../@directus/sdk/src/rest/commands/update/files.ts", "../../@directus/sdk/src/rest/commands/update/flows.ts", "../../@directus/sdk/src/rest/commands/update/folders.ts", "../../@directus/sdk/src/rest/commands/update/items.ts", "../../@directus/sdk/src/rest/commands/update/notifications.ts", "../../@directus/sdk/src/rest/commands/update/operations.ts", "../../@directus/sdk/src/rest/commands/update/panels.ts", "../../@directus/sdk/src/rest/commands/update/permissions.ts", "../../@directus/sdk/src/rest/commands/update/presets.ts", "../../@directus/sdk/src/rest/commands/update/relations.ts", "../../@directus/sdk/src/rest/commands/update/roles.ts", "../../@directus/sdk/src/rest/commands/update/settings.ts", "../../@directus/sdk/src/rest/commands/update/shares.ts", "../../@directus/sdk/src/rest/commands/update/singleton.ts", "../../@directus/sdk/src/rest/commands/update/translations.ts", "../../@directus/sdk/src/rest/commands/update/users.ts", "../../@directus/sdk/src/rest/commands/update/versions.ts", "../../@directus/sdk/src/rest/commands/update/webhooks.ts", "../../@directus/sdk/src/rest/commands/utils/cache.ts", "../../@directus/sdk/src/rest/commands/utils/export.ts", "../../@directus/sdk/src/rest/commands/utils/flows.ts", "../../@directus/sdk/src/rest/commands/utils/hash.ts", "../../@directus/sdk/src/rest/commands/utils/import.ts", "../../@directus/sdk/src/rest/commands/utils/operations.ts", "../../@directus/sdk/src/rest/commands/utils/shares.ts", "../../@directus/sdk/src/rest/commands/utils/sort.ts", "../../@directus/sdk/src/rest/commands/utils/users.ts", "../../@directus/sdk/src/rest/commands/utils/versions.ts", "../../@directus/sdk/src/rest/composable.ts", "../../@directus/sdk/src/rest/helpers/with-options.ts", "../../@directus/sdk/src/rest/helpers/with-search.ts", "../../@directus/sdk/src/rest/helpers/with-token.ts", "../../@directus/sdk/src/utils/get-request-url.ts", "../../@directus/sdk/src/auth/utils/memory-storage.ts", "../../@directus/sdk/src/auth/composable.ts", "../../@directus/sdk/src/auth/static.ts", "../../@directus/sdk/src/realtime/commands/auth.ts", "../../@directus/sdk/src/realtime/commands/pong.ts", "../../@directus/sdk/src/realtime/utils/message-callback.ts", "../../@directus/sdk/src/realtime/utils/generate-uid.ts", "../../@directus/sdk/src/realtime/composable.ts", "../../@directus/sdk/src/realtime/utils/sleep.ts"],
  "sourcesContent": ["import type { ClientGlobals, ClientOptions, DirectusClient } from './types/client.js';\n\n/**\n * The default globals supplied to the client\n */\nconst defaultGlobals: ClientGlobals = {\n\tfetch: globalThis.fetch,\n\tWebSocket: globalThis.WebSocket,\n\tURL: globalThis.URL,\n};\n\n/**\n * Creates a client to communicate with a Directus app.\n *\n * @param url The URL to the Directus app.\n * @param config The optional configuration.\n *\n * @returns A Directus client.\n */\nexport const createDirectus = <Schema extends object = any>(\n\turl: string,\n\toptions: ClientOptions = {}\n): DirectusClient<Schema> => {\n\tconst globals = options.globals ? { ...defaultGlobals, ...options.globals } : defaultGlobals;\n\treturn {\n\t\tglobals,\n\t\turl: new globals.URL(url),\n\t\twith(createExtension) {\n\t\t\treturn {\n\t\t\t\t...this,\n\t\t\t\t...createExtension(this),\n\t\t\t};\n\t\t},\n\t};\n};\n", "/**\n * Custom type guard to check if an object is likely a Fetch Response\n */\nexport function isFetchResponse(result: unknown): result is Response {\n\tif (typeof result !== 'object' || !result) return false;\n\n\treturn (\n\t\t'headers' in result &&\n\t\t'ok' in result &&\n\t\t'json' in result &&\n\t\ttypeof result.json === 'function' &&\n\t\t'text' in result &&\n\t\ttypeof result.json === 'function'\n\t);\n}\n", "import { isFetchResponse } from './is-response.js';\n\n/**\n * Tries to extract a fetch response\n */\nexport async function extractData(response: unknown) {\n\tif (typeof response !== 'object' || !response) return;\n\n\tif (isFetchResponse(response)) {\n\t\tconst type = response.headers.get('Content-Type')?.toLowerCase();\n\n\t\tif (type?.startsWith('application/json') || type?.startsWith('application/health+json')) {\n\t\t\tconst result = await response.json();\n\t\t\tif (!response.ok) throw result;\n\t\t\tif ('data' in result) return result.data;\n\t\t\treturn result;\n\t\t}\n\n\t\tif (type?.startsWith('text/html') || type?.startsWith('text/plain')) {\n\t\t\tconst result = await response.text();\n\t\t\tif (!response.ok) throw result;\n\t\t\treturn result;\n\t\t}\n\n\t\t// fallback for anything else\n\t\treturn response;\n\t}\n\n\t// exception for alternatives like ofetch that don't return the Response object\n\treturn 'data' in response ? response.data : response;\n}\n", "import type { FetchInterface } from '../index.js';\nimport { extractData } from './extract-data.js';\n\n/**\n * Request helper providing default settings\n *\n * @param url The request URL\n * @param options The request options\n *\n * @returns The API result if successful\n */\nexport const request = async <Output = any>(\n\turl: string,\n\toptions: RequestInit,\n\tfetcher: FetchInterface = globalThis.fetch\n): Promise<Output> => {\n\toptions.headers =\n\t\ttypeof options.headers === 'object' && !Array.isArray(options.headers)\n\t\t\t? (options.headers as Record<string, string>)\n\t\t\t: {};\n\n\tconst response = await fetcher(url, options);\n\n\treturn extractData(response).catch((reason) => {\n\t\tconst errors = typeof reason === 'object' && 'errors' in reason ? reason.errors : reason;\n\t\tthrow { errors, response };\n\t});\n};\n", "import type { DirectusClient } from '../types/client.js';\nimport type { GraphqlClient, GraphqlConfig } from './types.js';\nimport { request } from '../utils/request.js';\nimport { getRequestUrl } from '../utils/get-request-url.js';\nimport type { AuthenticationClient } from '../auth/types.js';\n\nconst defaultConfigValues: GraphqlConfig = {};\n\n/**\n * Creates a client to communicate with Directus GraphQL.\n *\n * @returns A Directus GraphQL client.\n */\nexport const graphql = (config: Partial<GraphqlConfig> = {}) => {\n\treturn <Schema extends object>(client: DirectusClient<Schema>): GraphqlClient<Schema> => {\n\t\tconst gqlConfig = { ...defaultConfigValues, ...config };\n\t\treturn {\n\t\t\tasync query<Output extends object = Record<string, any>>(\n\t\t\t\tquery: string,\n\t\t\t\tvariables?: Record<string, unknown>,\n\t\t\t\tscope: 'items' | 'system' = 'items'\n\t\t\t): Promise<Output> {\n\t\t\t\tconst fetchOptions: RequestInit = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: JSON.stringify({ query, variables }),\n\t\t\t\t};\n\n\t\t\t\tif ('credentials' in gqlConfig) {\n\t\t\t\t\tfetchOptions.credentials = gqlConfig.credentials;\n\t\t\t\t}\n\n\t\t\t\tconst headers: Record<string, string> = {};\n\n\t\t\t\tif ('getToken' in this) {\n\t\t\t\t\tconst token = await (this.getToken as AuthenticationClient<Schema>['getToken'])();\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\theaders['Authorization'] = `Bearer ${token}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ('Content-Type' in headers === false) {\n\t\t\t\t\theaders['Content-Type'] = 'application/json';\n\t\t\t\t}\n\n\t\t\t\tfetchOptions.headers = headers;\n\t\t\t\tconst requestPath = scope === 'items' ? '/graphql' : '/graphql/system';\n\t\t\t\tconst requestUrl = getRequestUrl(client.url, requestPath);\n\n\t\t\t\treturn await request<Output>(requestUrl.toString(), fetchOptions, client.globals.fetch);\n\t\t\t},\n\t\t};\n\t};\n};\n", "import type { AuthenticationData, AuthenticationMode } from '../../../index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport interface LoginOptions {\n\totp?: string;\n\tmode?: AuthenticationMode;\n}\n\n/**\n * Retrieve a temporary access token and refresh token.\n *\n * @param email Email address of the user you're retrieving the access token for.\n * @param password Password of the user.\n * @param options Optional login settings\n *\n * @returns The access and refresh tokens for the session\n */\nexport const login =\n\t<Schema extends object>(\n\t\temail: string,\n\t\tpassword: string,\n\t\toptions: LoginOptions = {}\n\t): RestCommand<AuthenticationData, Schema> =>\n\t() => {\n\t\tconst data: Record<string, string> = { email, password };\n\t\tif ('otp' in options) data['otp'] = options.otp;\n\t\tdata['mode'] = options.mode ?? 'cookie';\n\t\treturn { path: '/auth/login', method: 'POST', body: JSON.stringify(data) };\n\t};\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Invalidate the refresh token thus destroying the user's session.\n *\n * @param refresh_token The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.\n *\n * @returns Empty body.\n */\nexport const logout =\n\t<Schema extends object>(refresh_token?: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: '/auth/logout',\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(refresh_token ? { refresh_token } : {}),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Request a password reset email to be sent to the given user.\n *\n * @param email Email address of the user you're requesting a password reset for.\n * @param reset_url Provide a custom reset url which the link in the email will lead to. The reset token will be passed as a parameter.\n *\n * @returns Empty body.\n */\nexport const passwordRequest =\n\t<Schema extends object>(email: string, reset_url?: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: '/auth/password/request',\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ email, ...(reset_url ? { reset_url } : {}) }),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * The request a password reset endpoint sends an email with a link to the admin app (or a custom route) which in turn uses this endpoint to allow the user to reset their password.\n *\n * @param token Password reset token, as provided in the email sent by the request endpoint.\n * @param password New password for the user.\n *\n * @returns Empty body.\n */\nexport const passwordReset =\n\t<Schema extends object>(token: string, password: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: '/auth/password/reset',\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ token, password }),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\nexport interface ReadProviderOutput {\n\tname: string;\n\tdriver: string;\n\ticon?: string | null;\n}\n\n/**\n * List all the configured auth providers.\n *\n * @returns Array of configured auth providers.\n */\nexport const readProviders =\n\t<Schema extends object>(): RestCommand<ReadProviderOutput[], Schema> =>\n\t() => ({\n\t\tpath: `/auth`,\n\t\tmethod: 'GET',\n\t});\n", "import type { AuthenticationData, AuthenticationMode } from '../../../index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Retrieve a new access token using a refresh token.\n *\n * @param mode Whether to retrieve the refresh token in the JSON response, or in a httpOnly secure cookie. One of json, cookie.\n * @param refresh_token The refresh token to use. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here.\n *\n * @returns The new access and refresh tokens for the session.\n */\nexport const refresh =\n\t<Schema extends object>(\n\t\tmode: AuthenticationMode = 'cookie',\n\t\trefresh_token?: string\n\t): RestCommand<AuthenticationData, Schema> =>\n\t() => ({\n\t\tpath: '/auth/refresh',\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(mode === 'json' ? { refresh_token, mode } : { mode }),\n\t});\n", "import type { DirectusActivity } from '../../../schema/activity.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateActivityOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusActivity<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Creates a new comment on a given item.\n *\n * @param items The items to create\n * @param query Optional return data query\n *\n * @returns Returns the activity object of the created comment.\n */\nexport const createComment =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusActivity<Schema>>>(\n\t\titem: Partial<DirectusActivity<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateActivityOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/activity/comment`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusCollection } from '../../../schema/collection.js';\nimport type { ApplyQueryFields, NestedPartial, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateCollectionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusCollection<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create a new Collection. This will create a new table in the database as well.\n *\n * @param item This endpoint doesn't currently support any query parameters.\n * @param query Optional return data query\n *\n * @returns The collection object for the collection created in this request.\n */\nexport const createCollection =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusCollection<Schema>>>(\n\t\titem: NestedPartial<DirectusCollection<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateCollectionOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/collections`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusDashboard } from '../../../schema/dashboard.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateDashboardOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusDashboard<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new dashboards.\n *\n * @param items The items to create\n * @param query Optional return data query\n *\n * @returns Returns the dashboard object for the created dashboards.\n */\nexport const createDashboards =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusDashboard<Schema>>>(\n\t\titems: Partial<DirectusDashboard<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateDashboardOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/dashboards`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new dashboard.\n *\n * @param item The dashboard to create\n * @param query Optional return data query\n *\n * @returns Returns the dashboard object for the created dashboard.\n */\nexport const createDashboard =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusDashboard<Schema>>>(\n\t\titem: Partial<DirectusDashboard<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateDashboardOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/dashboards`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusField } from '../../../schema/field.js';\nimport type { ApplyQueryFields, NestedPartial, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateFieldOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusField<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create a new field in the given collection.\n *\n * @param collection The collection to create a field for\n * @param item The field to create\n * @param query Optional return data query\n *\n * @returns The field object for the created field.\n */\nexport const createField =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusField<Schema>>>(\n\t\tcollection: keyof Schema,\n\t\titem: NestedPartial<DirectusField<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateFieldOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/fields/${collection as string}`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusFile } from '../../../schema/file.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateFileOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFile<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Upload/create a new file.\n *\n * @param data Formdata object\n * @param query The query parameters\n *\n * @returns Returns the file object for the uploaded file, or an array of file objects if multiple files were uploaded at once.\n */\nexport const uploadFiles =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFile<Schema>>>(\n\t\tdata: FormData,\n\t\tquery?: TQuery\n\t): RestCommand<CreateFileOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: '/files',\n\t\tmethod: 'POST',\n\t\tbody: data,\n\t\tparams: query ?? {},\n\t\theaders: { 'Content-Type': 'multipart/form-data' },\n\t});\n\n/**\n * Import a file from the web\n *\n * @param url The url to import the file from\n * @param data Formdata object\n * @param query The query parameters\n *\n * @returns Returns the file object for the imported file.\n */\nexport const importFile =\n\t<Schema extends object, TQuery extends Query<Schema, DirectusFile<Schema>>>(\n\t\turl: string,\n\t\tdata: Partial<DirectusFile<Schema>> = {},\n\t\tquery?: TQuery\n\t): RestCommand<CreateFileOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: '/files/import',\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ url, data }),\n\t\tparams: query ?? {},\n\t});\n", "import type { DirectusFlow } from '../../../schema/flow.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateFlowOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFlow<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new flows.\n *\n * @param items The flows to create\n * @param query Optional return data query\n *\n * @returns Returns the flow object for the created flow.\n */\nexport const createFlows =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFlow<Schema>>>(\n\t\titems: Partial<DirectusFlow<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateFlowOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/flows`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new flow.\n *\n * @param item The flow to create\n * @param query Optional return data query\n *\n * @returns Returns the flow object for the created flow.\n */\nexport const createFlow =\n\t<Schema extends object, TQuery extends Query<Schema, DirectusFlow<Schema>>>(\n\t\titem: Partial<DirectusFlow<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateFlowOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/flows`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusFolder } from '../../../schema/folder.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateFolderOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFolder<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new (virtual) folders.\n *\n * @param item The folder to create\n * @param query Optional return data query\n *\n * @returns Returns the folder object of the folder that was created.\n */\nexport const createFolders =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFolder<Schema>>>(\n\t\titems: Partial<DirectusFolder<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateFolderOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/folders`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new (virtual) folder.\n *\n * @param item The folder to create\n * @param query Optional return data query\n *\n * @returns Returns the folder object of the folder that was created.\n */\nexport const createFolder =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFolder<Schema>>>(\n\t\titem: Partial<DirectusFolder<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateFolderOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/folders`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { ApplyQueryFields, CollectionType, Query, UnpackList } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateItemOutput<\n\tSchema extends object,\n\tCollection extends keyof Schema,\n\tTQuery extends Query<Schema, Schema[Collection]>\n> = ApplyQueryFields<Schema, CollectionType<Schema, Collection>, TQuery['fields']>;\n\n/**\n * Create new items in the given collection.\n *\n * @param collection The collection of the item\n * @param items The items to create\n * @param query Optional return data query\n *\n * @returns Returns the item objects of the item that were created.\n */\nexport const createItems =\n\t<Schema extends object, Collection extends keyof Schema, const TQuery extends Query<Schema, Schema[Collection]>>(\n\t\tcollection: Collection,\n\t\titems: Partial<UnpackList<Schema[Collection]>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateItemOutput<Schema, Collection, TQuery>[], Schema> =>\n\t() => {\n\t\tconst _collection = String(collection);\n\n\t\tif (_collection.startsWith('directus_')) {\n\t\t\tthrow new Error('Cannot use createItems for core collections');\n\t\t}\n\n\t\treturn {\n\t\t\tpath: `/items/${_collection}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(items),\n\t\t\tmethod: 'POST',\n\t\t};\n\t};\n\n/**\n * Create a new item in the given collection.\n *\n * @param collection The collection of the item\n * @param item The item to create\n * @param query Optional return data query\n *\n * @returns Returns the item objects of the item that were created.\n */\nexport const createItem =\n\t<Schema extends object, Collection extends keyof Schema, const TQuery extends Query<Schema, Schema[Collection]>>(\n\t\tcollection: Collection,\n\t\titem: Partial<UnpackList<Schema[Collection]>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateItemOutput<Schema, Collection, TQuery>, Schema> =>\n\t() => {\n\t\tconst _collection = String(collection);\n\n\t\tif (_collection.startsWith('directus_')) {\n\t\t\tthrow new Error('Cannot use createItem for core collections');\n\t\t}\n\n\t\treturn {\n\t\t\tpath: `/items/${_collection}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'POST',\n\t\t};\n\t};\n", "import type { DirectusNotification } from '../../../schema/notification.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateNotificationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusNotification<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new notifications.\n *\n * @param items The notifications to create\n * @param query Optional return data query\n *\n * @returns Returns the notification object for the created notification.\n */\nexport const createNotifications =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusNotification<Schema>>>(\n\t\titems: Partial<DirectusNotification<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateNotificationOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/notifications`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new notification.\n *\n * @param item The notification to create\n * @param query Optional return data query\n *\n * @returns Returns the notification object for the created notification.\n */\nexport const createNotification =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusNotification<Schema>>>(\n\t\titem: Partial<DirectusNotification<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateNotificationOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/notifications`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusOperation } from '../../../schema/operation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateOperationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusOperation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new operations.\n *\n * @param items The operation to create\n * @param query Optional return data query\n *\n * @returns Returns the operation object for the created operation.\n */\nexport const createOperations =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusOperation<Schema>>>(\n\t\titems: Partial<DirectusOperation<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateOperationOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/operations`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new operation.\n *\n * @param item The operation to create\n * @param query Optional return data query\n *\n * @returns Returns the operation object for the created operation.\n */\nexport const createOperation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusOperation<Schema>>>(\n\t\titem: Partial<DirectusOperation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateOperationOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/operations`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusPanel } from '../../../schema/panel.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreatePanelOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPanel<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new panels.\n *\n * @param items The panel to create\n * @param query Optional return data query\n *\n * @returns Returns the panel object for the created panel.\n */\nexport const createPanels =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPanel<Schema>>>(\n\t\titems: Partial<DirectusPanel<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreatePanelOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/panels`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new panel.\n *\n * @param item The panel to create\n * @param query Optional return data query\n *\n * @returns Returns the panel object for the created panel.\n */\nexport const createPanel =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPanel<Schema>>>(\n\t\titem: Partial<DirectusPanel<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreatePanelOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/panels`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusPermission } from '../../../schema/permission.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreatePermissionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPermission<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new permission rules\n *\n * @param items The permission rules to create\n * @param query Optional return data query\n *\n * @returns Returns the permission objects for the created permissions.\n */\nexport const createPermissions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPermission<Schema>>>(\n\t\titems: Partial<DirectusPermission<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreatePermissionOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/permissions`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new permission rule\n *\n * @param item The permission rule to create\n * @param query Optional return data query\n *\n * @returns Returns the permission object for the created permission.\n */\nexport const createPermission =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPermission<Schema>>>(\n\t\titem: Partial<DirectusPermission<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreatePermissionOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/permissions`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusPreset } from '../../../schema/preset.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreatePresetOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPreset<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new presets.\n *\n * @param items The presets to create\n * @param query Optional return data query\n *\n * @returns Returns the preset object for the created preset.\n */\nexport const createPresets =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPreset<Schema>>>(\n\t\titems: Partial<DirectusPreset<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreatePresetOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/presets`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new preset.\n *\n * @param item The preset to create\n * @param query Optional return data query\n *\n * @returns Returns the preset object for the created preset.\n */\nexport const createPreset =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPreset<Schema>>>(\n\t\titem: Partial<DirectusPreset<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreatePresetOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/presets`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusRelation } from '../../../schema/relation.js';\nimport type { ApplyQueryFields, NestedPartial } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateRelationOutput<\n\tSchema extends object,\n\tItem extends object = DirectusRelation<Schema>\n> = ApplyQueryFields<Schema, Item, '*'>;\n\n/**\n * Create a new relation.\n *\n * @param item The relation to create\n * @param query Optional return data query\n *\n * @returns Returns the relation object for the created relation.\n */\nexport const createRelation =\n\t<Schema extends object>(\n\t\titem: NestedPartial<DirectusRelation<Schema>>\n\t): RestCommand<CreateRelationOutput<Schema>, Schema> =>\n\t() => ({\n\t\tpath: `/relations`,\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusRole } from '../../../schema/role.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateRoleOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusRole<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new roles.\n *\n * @param items The roles to create\n * @param query Optional return data query\n *\n * @returns Returns the role objects for the created roles.\n */\nexport const createRoles =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRole<Schema>>>(\n\t\titems: Partial<DirectusRole<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateRoleOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/roles`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new role.\n *\n * @param item The role to create\n * @param query Optional return data query\n *\n * @returns Returns the role object for the created role.\n */\nexport const createRole =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRole<Schema>>>(\n\t\titem: Partial<DirectusRole<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateRoleOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/roles`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusShare } from '../../../schema/share.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateShareOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusShare<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new shares.\n *\n * @param items The shares to create\n * @param query Optional return data query\n *\n * @returns Returns the share objects for the created shares.\n */\nexport const createShares =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusShare<Schema>>>(\n\t\titems: Partial<DirectusShare<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateShareOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/shares`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new share.\n *\n * @param item The share to create\n * @param query Optional return data query\n *\n * @returns Returns the share object for the created share.\n */\nexport const createShare =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusShare<Schema>>>(\n\t\titem: Partial<DirectusShare<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateShareOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/shares`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusTranslation } from '../../../schema/translation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateTranslationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusTranslation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new translation.\n *\n * @param items The translations to create\n * @param query Optional return data query\n *\n * @returns Returns the translation object for the created translation.\n */\nexport const createTranslations =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusTranslation<Schema>>>(\n\t\titems: Partial<DirectusTranslation<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateTranslationOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/translations`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new translation.\n *\n * @param item The translation to create\n * @param query Optional return data query\n *\n * @returns Returns the translation object for the created translation.\n */\nexport const createTranslation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusTranslation<Schema>>>(\n\t\titem: Partial<DirectusTranslation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateTranslationOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/translations`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusUser } from '../../../schema/user.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateUserOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusUser<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new users.\n *\n * @param items The items to create\n * @param query Optional return data query\n *\n * @returns Returns the user objects for the created users.\n */\nexport const createUsers =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\titems: Partial<DirectusUser<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateUserOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/users`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new user.\n *\n * @param item The user to create\n * @param query Optional return data query\n *\n * @returns Returns the user object for the created user.\n */\nexport const createUser =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\titem: Partial<DirectusUser<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateUserOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/users`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusVersion } from '../../../schema/version.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateContentVersionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusVersion<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new Content Versions.\n *\n * @param items The Content Versions to create\n * @param query Optional return data query\n *\n * @returns Returns the Content Version object for the created Content Versions.\n */\nexport const createContentVersions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusVersion<Schema>>>(\n\t\titems: Partial<DirectusVersion<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateContentVersionOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/versions`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new Content Version.\n *\n * @param item The Content Version to create\n * @param query Optional return data query\n *\n * @returns Returns the Content Version object for the created Content Version.\n */\nexport const createContentVersion =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusVersion<Schema>>>(\n\t\titem: Partial<DirectusVersion<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateContentVersionOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/versions`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusWebhook } from '../../../schema/webhook.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type CreateWebhookOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusWebhook<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Create multiple new webhooks.\n *\n * @param items The webhooks to create\n * @param query Optional return data query\n *\n * @returns Returns the webhook objects for the created webhooks.\n */\nexport const createWebhooks =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusWebhook<Schema>>>(\n\t\titems: Partial<DirectusWebhook<Schema>>[],\n\t\tquery?: TQuery\n\t): RestCommand<CreateWebhookOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/webhooks`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(items),\n\t\tmethod: 'POST',\n\t});\n\n/**\n * Create a new webhook.\n *\n * @param item The webhook to create\n * @param query Optional return data query\n *\n * @returns Returns the webhook object for the created webhook.\n */\nexport const createWebhook =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusWebhook<Schema>>>(\n\t\titem: Partial<DirectusWebhook<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<CreateWebhookOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/webhooks`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'POST',\n\t});\n", "import type { DirectusActivity } from '../../../schema/activity.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Deletes a comment.\n * @param key\n * @returns Nothing\n */\nexport const deleteComment =\n\t<Schema extends object>(key: DirectusActivity<Schema>['id']): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/activity/comment/${key}`,\n\t\tmethod: 'DELETE',\n\t});\n", "import type { DirectusCollection } from '../../../schema/collection.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete a collection.\n * @param collection\n * @returns\n */\nexport const deleteCollection =\n\t<Schema extends object>(collection: DirectusCollection<Schema>['collection']): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/collections/${collection}`,\n\t\tmethod: 'DELETE',\n\t});\n", "import type { AggregationTypes, GroupByFields, Query } from '../../types/index.js';\n\ntype ExtendedQuery<Schema extends object, Item> = Query<Schema, Item> & {\n\taggregate?: Record<keyof AggregationTypes, string>;\n\tgroupBy?: (string | GroupByFields<Schema, Item>)[];\n};\n\n/**\n * Transform nested query object to an url compatible format\n *\n * @param query The nested query object\n *\n * @returns Flat query parameters\n */\nexport const queryToParams = <Schema extends object, Item>(\n\tquery: ExtendedQuery<Schema, Item>\n): Record<string, string> => {\n\tconst params: Record<string, string> = {};\n\n\tif (Array.isArray(query.fields) && query.fields.length > 0) {\n\t\ttype FieldItem = (typeof query.fields)[number];\n\n\t\tconst walkFields = (value: FieldItem, chain: string[] = []): string | string[] => {\n\t\t\tif (typeof value === 'object') {\n\t\t\t\tconst result = [];\n\n\t\t\t\tfor (const key in value) {\n\t\t\t\t\tconst nestedField = value[key as keyof typeof value] ?? [];\n\n\t\t\t\t\tif (Array.isArray(nestedField)) {\n\t\t\t\t\t\t// regular nested fields\n\t\t\t\t\t\tfor (const item of nestedField) {\n\t\t\t\t\t\t\tresult.push(walkFields(item as FieldItem, [...chain, key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof nestedField === 'object') {\n\t\t\t\t\t\t// many to any nested\n\t\t\t\t\t\tfor (const scope of Object.keys(nestedField)) {\n\t\t\t\t\t\t\tconst fields = (nestedField as Record<string, FieldItem[]>)[scope]!;\n\n\t\t\t\t\t\t\tfor (const item of fields) {\n\t\t\t\t\t\t\t\tresult.push(walkFields(item as FieldItem, [...chain, `${key}:${scope}`]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn result.flatMap((items) => items);\n\t\t\t}\n\n\t\t\treturn [...chain, String(value)].join('.');\n\t\t};\n\n\t\tparams['fields'] = query.fields.flatMap((value) => walkFields(value)).join(',');\n\t}\n\n\tif (query.filter && Object.keys(query.filter).length > 0) {\n\t\tparams['filter'] = JSON.stringify(query.filter);\n\t}\n\n\tif (query.search) {\n\t\t// covers both empty string and undefined\n\t\tparams['search'] = query.search;\n\t}\n\n\tif ('sort' in query && query.sort) {\n\t\t// covers empty array and undefined\n\t\tparams['sort'] = typeof query.sort === 'string' ? query.sort : query.sort.join(',');\n\t}\n\n\tif (typeof query.limit === 'number' && query.limit >= -1) {\n\t\tparams['limit'] = String(query.limit);\n\t}\n\n\tif (typeof query.offset === 'number' && query.offset >= 0) {\n\t\tparams['offset'] = String(query.offset);\n\t}\n\n\tif (typeof query.page === 'number' && query.page >= 1) {\n\t\tparams['page'] = String(query.page);\n\t}\n\n\tif (query.deep && Object.keys(query.deep).length > 0) {\n\t\tparams['deep'] = JSON.stringify(query.deep);\n\t}\n\n\tif (query.alias && Object.keys(query.alias).length > 0) {\n\t\tparams['alias'] = JSON.stringify(query.alias);\n\t}\n\n\tif (query.aggregate && Object.keys(query.aggregate).length > 0) {\n\t\tparams['aggregate'] = JSON.stringify(query.aggregate);\n\t}\n\n\tif (query.groupBy && query.groupBy.length > 0) {\n\t\tparams['groupBy'] = query.groupBy.join(',');\n\t}\n\n\tfor (const [key, value] of Object.entries(query)) {\n\t\tif (key in params) continue;\n\n\t\tif (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n\t\t\tparams[key] = String(value);\n\t\t} else {\n\t\t\tparams[key] = JSON.stringify(value);\n\t\t}\n\t}\n\n\treturn params;\n};\n", "/**\n *\n * @param value\n * @param message\n * @throws Throws an error if an empty array or string is provided\n */\nexport const throwIfEmpty = (value: string | (string | number)[], message: string) => {\n\tif (value.length === 0) {\n\t\tthrow new Error(message);\n\t}\n};\n", "/**\n *\n * @param value\n * @param message\n * @throws Throws an error if the collection starts with the `directus_` prefix\n */\nexport const throwIfCoreCollection = (value: string | number | symbol, message: string) => {\n\tif (String(value).startsWith('directus_')) {\n\t\tthrow new Error(message);\n\t}\n};\n", "import type { DirectusDashboard } from '../../../schema/dashboard.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing dashboards.\n * @param keysOrQuery\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteDashboards =\n\t<Schema extends object>(keys: DirectusDashboard<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/dashboards`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing dashboard.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteDashboard =\n\t<Schema extends object>(key: DirectusDashboard<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/dashboards/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusField } from '../../../schema/field.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Deletes the given field in the given collection.\n * @param collection\n * @param field\n * @returns\n * @throws Will throw if collection is empty\n * @throws Will throw if field is empty\n */\nexport const deleteField =\n\t<Schema extends object>(\n\t\tcollection: DirectusField<Schema>['collection'],\n\t\tfield: DirectusField<Schema>['field']\n\t): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\t\tthrowIfEmpty(field, 'Field cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/fields/${collection}/${field}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusFile } from '../../../schema/file.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple files at once.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteFiles =\n\t<Schema extends object>(keys: DirectusFile<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/files`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing file.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteFile =\n\t<Schema extends object>(key: DirectusFile<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/files/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusFlow } from '../../../schema/flow.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing flows.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteFlows =\n\t<Schema extends object>(keys: DirectusFlow<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/flows`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing flow.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteFlow =\n\t<Schema extends object>(key: DirectusFlow<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/flows/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusFolder } from '../../../schema/folder.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing folders.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteFolders =\n\t<Schema extends object>(keys: DirectusFolder<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/folders`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing folder.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteFolder =\n\t<Schema extends object>(key: DirectusFolder<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/folders/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { Query } from '../../../types/index.js';\nimport { throwIfCoreCollection, throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing items.\n *\n * @param collection The collection of the items\n * @param keysOrQuery The primary keys or a query\n *\n * @returns Nothing\n * @throws Will throw if collection is empty\n * @throws Will throw if collection is a core collection\n * @throws Will throw if keysOrQuery is empty\n */\nexport const deleteItems =\n\t<Schema extends object, Collection extends keyof Schema, const TQuery extends Query<Schema, Schema[Collection]>>(\n\t\tcollection: Collection,\n\t\tkeysOrQuery: string[] | number[] | TQuery\n\t): RestCommand<void, Schema> =>\n\t() => {\n\t\tlet payload: Record<string, any> = {};\n\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use deleteItems for core collections');\n\n\t\tif (Array.isArray(keysOrQuery)) {\n\t\t\tthrowIfEmpty(keysOrQuery, 'keysOrQuery cannot be empty');\n\t\t\tpayload = { keys: keysOrQuery };\n\t\t} else {\n\t\t\tthrowIfEmpty(Object.keys(keysOrQuery), 'keysOrQuery cannot be empty');\n\t\t\tpayload = { query: keysOrQuery };\n\t\t}\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}`,\n\t\t\tbody: JSON.stringify(payload),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing item.\n *\n * @param collection The collection of the item\n * @param key The primary key of the item\n *\n * @returns Nothing\n * @throws Will throw if collection is empty\n * @throws Will throw if collection is a core collection\n * @throws Will throw if key is empty\n */\nexport const deleteItem =\n\t<Schema extends object, Collection extends keyof Schema>(\n\t\tcollection: Collection,\n\t\tkey: string | number\n\t): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use deleteItem for core collections');\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusNotification } from '../../../schema/notification.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing notifications.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteNotifications =\n\t<Schema extends object>(keys: DirectusNotification<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/notifications`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing notification.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteNotification =\n\t<Schema extends object>(key: DirectusNotification<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/notifications/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusOperation } from '../../../schema/operation.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing operations.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteOperations =\n\t<Schema extends object>(keys: DirectusOperation<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/operations`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing operation.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteOperation =\n\t<Schema extends object>(key: DirectusOperation<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/operations/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusPanel } from '../../../schema/panel.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing panels.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deletePanels =\n\t<Schema extends object>(keys: DirectusPanel<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/panels`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing panel.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deletePanel =\n\t<Schema extends object>(key: DirectusPanel<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/panels/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusPermission } from '../../../schema/permission.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing permissions rules\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deletePermissions =\n\t<Schema extends object>(keys: DirectusPermission<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/permissions`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing permissions rule\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deletePermission =\n\t<Schema extends object>(key: DirectusPermission<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/permissions/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusPreset } from '../../../schema/preset.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing presets.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deletePresets =\n\t<Schema extends object>(keys: DirectusPreset<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/presets`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing preset.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deletePreset =\n\t<Schema extends object>(key: DirectusPreset<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/presets/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusRelation } from '../../../schema/relation.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete an existing relation.\n * @param collection\n * @param field\n * @returns\n * @throws Will throw if collection is empty\n * @throws Will throw if field is empty\n */\nexport const deleteRelation =\n\t<Schema extends object>(\n\t\tcollection: DirectusRelation<Schema>['collection'],\n\t\tfield: DirectusRelation<Schema>['field']\n\t): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\t\tthrowIfEmpty(field, 'Field cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/relations/${collection}/${field}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusRole } from '../../../schema/role.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing roles.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteRoles =\n\t<Schema extends object>(keys: DirectusRole<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/roles`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing role.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteRole =\n\t<Schema extends object>(key: DirectusRole<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/roles/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusShare } from '../../../schema/share.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing shares.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteShares =\n\t<Schema extends object>(keys: DirectusShare<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/shares`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing share.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteShare =\n\t<Schema extends object>(key: DirectusShare<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/shares/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusTranslation } from '../../../schema/translation.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing translations.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteTranslations =\n\t<Schema extends object>(keys: DirectusTranslation<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/translations`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing translation.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteTranslation =\n\t<Schema extends object>(key: DirectusTranslation<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/translations/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { RestCommand } from '../../types.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { DirectusUser } from '../../../schema/user.js';\n\n/**\n * Delete multiple existing users.\n *\n * @param keys\n * @returns Nothing\n * @throws Will throw if keys is empty\n */\nexport const deleteUsers =\n\t<Schema extends object>(keys: DirectusUser<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/users`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing user.\n *\n * @param key\n * @returns Nothing\n * @throws Will throw if key is empty\n */\nexport const deleteUser =\n\t<Schema extends object>(key: DirectusUser<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/users/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusVersion } from '../../../schema/version.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfEmpty } from '../../utils/index.js';\n\n/**\n * Delete multiple existing Content Versions.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteContentVersions =\n\t<Schema extends object>(keys: DirectusVersion<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing Content Version.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteContentVersion =\n\t<Schema extends object>(key: DirectusVersion<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusWebhook } from '../../../schema/webhook.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Delete multiple existing webhooks.\n * @param keys\n * @returns\n * @throws Will throw if keys is empty\n */\nexport const deleteWebhooks =\n\t<Schema extends object>(keys: DirectusWebhook<Schema>['id'][]): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/webhooks`,\n\t\t\tbody: JSON.stringify(keys),\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n\n/**\n * Delete an existing webhook.\n * @param key\n * @returns\n * @throws Will throw if key is empty\n */\nexport const deleteWebhook =\n\t<Schema extends object>(key: DirectusWebhook<Schema>['id']): RestCommand<void, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/webhooks/${key}`,\n\t\t\tmethod: 'DELETE',\n\t\t};\n\t};\n", "import type { DirectusActivity } from '../../../schema/activity.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadActivityOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusActivity<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Returns a list of activity actions.\n * @param query The query parameters\n * @returns An array of up to limit activity objects. If no items are available, data will be an empty array.\n */\nexport const readActivities =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusActivity<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadActivityOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/activity`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * Returns a single activity action by primary key.\n * @param key The primary key of the activity\n * @param query The query parameters\n * @returns Returns an activity object if a valid identifier was provided.\n * @throws Will throw if key is empty\n */\nexport const readActivity =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusActivity<Schema>>>(\n\t\tkey: DirectusActivity<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadActivityOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/activity/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { AllCollections } from '../../../index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { AggregationOptions, AggregationOutput } from '../../../types/aggregate.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Aggregate allow you to perform calculations on a set of values, returning a single result.\n * @param collection The collection to aggregate\n * @param options The aggregation options\n * @returns Aggregated data\n * @throws Will throw if collection is empty\n */\nexport const aggregate =\n\t<\n\t\tSchema extends object,\n\t\tCollection extends AllCollections<Schema>,\n\t\tOptions extends AggregationOptions<Schema, Collection>\n\t>(\n\t\tcollection: Collection,\n\t\toptions: Options\n\t): RestCommand<AggregationOutput<Schema, Collection, Options>, Schema> =>\n\t() => {\n\t\tconst collectionName = String(collection);\n\t\tthrowIfEmpty(collectionName, 'Collection cannot be empty');\n\n\t\tconst path = collectionName.startsWith('directus_')\n\t\t\t? `/${collectionName.substring(9)}`\n\t\t\t: `/items/${collectionName}`;\n\n\t\treturn {\n\t\t\tpath,\n\t\t\tmethod: 'GET',\n\t\t\tparams: {\n\t\t\t\t...(options.query ?? {}),\n\t\t\t\t...(options.groupBy ? { groupBy: options.groupBy } : {}),\n\t\t\t\taggregate: options.aggregate,\n\t\t\t},\n\t\t};\n\t};\n", "import type { DirectusFile } from '../../../schema/file.js';\nimport type { AssetsQuery } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * Read the contents of a file as a ReadableStream<Uint8Array>\n *\n * @param {string} key\n * @param {AssetsQuery} query\n * @returns {ReadableStream<Uint8Array>}\n */\nexport const readAssetRaw =\n\t<Schema extends object>(\n\t\tkey: DirectusFile<Schema>['id'],\n\t\tquery?: AssetsQuery\n\t): RestCommand<ReadableStream<Uint8Array>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/assets/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t\tonResponse: (response) => response.body,\n\t\t};\n\t};\n\n/**\n * Read the contents of a file as a Blob\n *\n * @param {string} key\n * @param {AssetsQuery} query\n * @returns {Blob}\n */\nexport const readAssetBlob =\n\t<Schema extends object>(key: DirectusFile<Schema>['id'], query?: AssetsQuery): RestCommand<Blob, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/assets/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t\tonResponse: (response) => response.blob(),\n\t\t};\n\t};\n\n/**\n * Read the contents of a file as a ArrayBuffer\n *\n * @param {string} key\n * @param {AssetsQuery} query\n * @returns {ArrayBuffer}\n */\nexport const readAssetArrayBuffer =\n\t<Schema extends object>(key: DirectusFile<Schema>['id'], query?: AssetsQuery): RestCommand<ArrayBuffer, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/assets/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t\tonResponse: (response) => response.arrayBuffer(),\n\t\t};\n\t};\n", "import type { DirectusCollection } from '../../../schema/collection.js';\nimport type { ApplyQueryFields } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadCollectionOutput<\n\tSchema extends object,\n\tItem extends object = DirectusCollection<Schema>\n> = ApplyQueryFields<Schema, Item, '*'>;\n\n/**\n * List the available collections.\n * @returns An array of collection objects.\n */\nexport const readCollections =\n\t<Schema extends object>(): RestCommand<ReadCollectionOutput<Schema>[], Schema> =>\n\t() => ({\n\t\tpath: `/collections`,\n\t\tmethod: 'GET',\n\t});\n\n/**\n * Retrieve a single collection by table name.\n * @param collection The collection name\n * @returns A collection object.\n * @throws Will throw if collection is empty\n */\nexport const readCollection =\n\t<Schema extends object>(\n\t\tcollection: DirectusCollection<Schema>['collection']\n\t): RestCommand<ReadCollectionOutput<Schema>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/collections/${collection}`,\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusDashboard } from '../../../schema/dashboard.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadDashboardOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusDashboard<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all dashboards that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit dashboard objects. If no items are available, data will be an empty array.\n */\nexport const readDashboards =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusDashboard<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadDashboardOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/dashboards`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing dashboard by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns the requested dashboard object.\n * @throws Will throw if key is empty\n */\nexport const readDashboard =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusDashboard<Schema>>>(\n\t\tkey: DirectusDashboard<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadDashboardOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/dashboards/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { ExtensionItem } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\n/**\n * List the available extensions in the project.\n * @returns An array of extensions.\n */\nexport const readExtensions =\n\t<Schema extends object>(): RestCommand<ExtensionItem[], Schema> =>\n\t() => ({\n\t\tpath: `/extensions/`,\n\t\tmethod: 'GET',\n\t});\n", "import type { DirectusField } from '../../../schema/field.js';\nimport type { ApplyQueryFields } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadFieldOutput<Schema extends object, Item extends object = DirectusField<Schema>> = ApplyQueryFields<\n\tSchema,\n\tItem,\n\t'*'\n>;\n\n/**\n * List the available fields.\n * @param query The query parameters\n * @returns An array of field objects.\n */\nexport const readFields =\n\t<Schema extends object>(): RestCommand<ReadFieldOutput<Schema>[], Schema> =>\n\t() => ({\n\t\tpath: `/fields`,\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List the available fields in a given collection.\n * @param collection The primary key of the field\n * @returns\n * @throws Will throw if collection is empty\n */\nexport const readFieldsByCollection =\n\t<Schema extends object>(\n\t\tcollection: DirectusField<Schema>['collection']\n\t): RestCommand<ReadFieldOutput<Schema>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/fields/${collection}`,\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n\n/**\n *\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns\n * @throws Will throw if collection is empty\n * @throws Will throw if field is empty\n */\nexport const readField =\n\t<Schema extends object>(\n\t\tcollection: DirectusField<Schema>['collection'],\n\t\tfield: DirectusField<Schema>['field']\n\t): RestCommand<ReadFieldOutput<Schema>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\t\tthrowIfEmpty(field, 'Field cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/fields/${collection}/${field}`,\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusFile } from '../../../schema/file.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadFileOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFile<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all files that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit file objects. If no items are available, data will be an empty array.\n */\nexport const readFiles =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFile<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadFileOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/files`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * Retrieve a single file by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a file object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readFile =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFile<Schema>>>(\n\t\tkey: DirectusFile<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadFileOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/files/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusFlow } from '../../../schema/flow.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadFlowOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFlow<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all flows that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit flow objects. If no items are available, data will be an empty array.\n */\nexport const readFlows =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFlow<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadFlowOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/flows`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing flow by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns the requested flow object.\n * @throws Will throw if key is empty\n */\nexport const readFlow =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFlow<Schema>>>(\n\t\tkey: DirectusFlow<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadFlowOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/flows/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusFolder } from '../../../schema/folder.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadFolderOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFolder<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all folders that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit folder objects. If no items are available, data will be an empty array.\n */\nexport const readFolders =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFolder<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadFolderOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/folders`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing folder by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a folder object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readFolder =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFolder<Schema>>>(\n\t\tkey: DirectusFolder<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadFolderOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/folders/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { ApplyQueryFields, CollectionType, Query, QueryItem, RegularCollections } from '../../../types/index.js';\nimport { throwIfEmpty, throwIfCoreCollection } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadItemOutput<\n\tSchema extends object,\n\tCollection extends RegularCollections<Schema>,\n\tTQuery extends Query<Schema, CollectionType<Schema, Collection>>\n> = ApplyQueryFields<Schema, CollectionType<Schema, Collection>, TQuery['fields']>;\n\n/**\n * List all items that exist in Directus.\n *\n * @param collection The collection of the items\n * @param query The query parameters\n *\n * @returns An array of up to limit item objects. If no items are available, data will be an empty array.\n * @throws Will throw if collection is a core collection\n * @throws Will throw if collection is empty\n */\nexport const readItems =\n\t<\n\t\tSchema extends object,\n\t\tCollection extends RegularCollections<Schema>,\n\t\tconst TQuery extends Query<Schema, CollectionType<Schema, Collection>>\n\t>(\n\t\tcollection: Collection,\n\t\tquery?: TQuery\n\t): RestCommand<ReadItemOutput<Schema, Collection, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use readItems for core collections');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n\n/**\n * Get an item that exists in Directus.\n *\n * @param collection The collection of the item\n * @param key The primary key of the item\n * @param query The query parameters\n *\n * @returns Returns an item object if a valid primary key was provided.\n * @throws Will throw if collection is a core collection\n * @throws Will throw if collection is empty\n * @throws Will throw if key is empty\n */\nexport const readItem =\n\t<\n\t\tSchema extends object,\n\t\tCollection extends RegularCollections<Schema>,\n\t\tconst TQuery extends QueryItem<Schema, CollectionType<Schema, Collection>>\n\t>(\n\t\tcollection: Collection,\n\t\tkey: string | number,\n\t\tquery?: TQuery\n\t): RestCommand<ReadItemOutput<Schema, Collection, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use readItem for core collections');\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusNotification } from '../../../schema/notification.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadNotificationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusNotification<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all notifications that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit notification objects. If no items are available, data will be an empty array.\n */\nexport const readNotifications =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusNotification<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadNotificationOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/notifications`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing notification by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns the requested notification object.\n * @throws Will throw if key is empty\n */\nexport const readNotification =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusNotification<Schema>>>(\n\t\tkey: DirectusNotification<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadNotificationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/notifications/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusOperation } from '../../../schema/operation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadOperationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusOperation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all operations that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit operation objects. If no items are available, data will be an empty array.\n */\nexport const readOperations =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusOperation<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadOperationOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/operations`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List all Operations that exist in Directus.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Operation object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readOperation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusOperation<Schema>>>(\n\t\tkey: DirectusOperation<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadOperationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/operations/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusPanel } from '../../../schema/panel.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadPanelOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPanel<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Panels that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit panel objects. If no items are available, data will be an empty array.\n */\nexport const readPanels =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPanel<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadPanelOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/panels`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing panel by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns the requested panel object.\n * @throws Will throw if key is empty\n */\nexport const readPanel =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPanel<Schema>>>(\n\t\tkey: DirectusPanel<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadPanelOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/panels/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusPermission } from '../../../schema/permission.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadPermissionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPermission<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Permissions that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Permission objects. If no items are available, data will be an empty array.\n */\nexport const readPermissions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPermission<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadPermissionOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/permissions`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List all Permissions that exist in Directus.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Permission object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readPermission =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPermission<Schema>>>(\n\t\tkey: DirectusPermission<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadPermissionOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/permissions/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusPreset } from '../../../schema/preset.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadPresetOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPreset<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Presets that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Preset objects. If no items are available, data will be an empty array.\n */\nexport const readPresets =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPreset<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadPresetOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/presets`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing preset by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Preset object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readPreset =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPreset<Schema>>>(\n\t\tkey: DirectusPreset<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadPresetOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/presets/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusRelation } from '../../../schema/relation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadRelationOutput<\n\tSchema extends object,\n\tItem extends object = DirectusRelation<Schema>\n> = ApplyQueryFields<Schema, Item, '*'>;\n\n/**\n * List all Relations that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Relation objects. If no items are available, data will be an empty array.\n */\nexport const readRelations =\n\t<Schema extends object>(): RestCommand<ReadRelationOutput<Schema>[], Schema> =>\n\t() => ({\n\t\tpath: `/relations`,\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Relation by primary key.\n * @param collection The collection\n * @returns Returns a Relation object if a valid primary key was provided.\n * @throws Will throw if collection is empty\n */\nexport const readRelationByCollection =\n\t<Schema extends object>(\n\t\tcollection: DirectusRelation<Schema>['collection']\n\t): RestCommand<ReadRelationOutput<Schema>, Schema> =>\n\t() => ({\n\t\tpath: `/relations/${collection}`,\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Relation by primary key.\n * @param collection The collection\n * @param field The field\n * @returns Returns a Relation object if a valid primary key was provided.\n * @throws Will throw if collection is empty\n * @throws Will throw if field is empty\n */\nexport const readRelation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRelation<Schema>>>(\n\t\tcollection: DirectusRelation<Schema>['collection'],\n\t\tfield: DirectusRelation<Schema>['field']\n\t): RestCommand<ReadRelationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\t\tthrowIfEmpty(field, 'Field cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/relations/${collection}/${field}`,\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusRevision } from '../../../schema/revision.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadRevisionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusRevision<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Revisions that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Revision objects. If no items are available, data will be an empty array.\n */\nexport const readRevisions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRevision<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadRevisionOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/revisions`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Revision by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Revision object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readRevision =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRevision<Schema>>>(\n\t\tkey: DirectusRevision<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadRevisionOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/revisions/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusRole } from '../../../schema/role.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadRoleOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusRole<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Roles that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Role objects. If no items are available, data will be an empty array.\n */\nexport const readRoles =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRole<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadRoleOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/roles`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Role by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Role object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readRole =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRole<Schema>>>(\n\t\tkey: DirectusRole<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadRoleOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/roles/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusSettings } from '../../../schema/settings.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadSettingOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusSettings<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Retrieve Settings.\n *\n * @param query The query parameters\n *\n * @returns Returns the settings object.\n */\nexport const readSettings =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusSettings<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadSettingOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/settings`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n", "import type { DirectusShare } from '../../../schema/share.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadShareOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusShare<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Shares that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Share objects. If no items are available, data will be an empty array.\n */\nexport const readShares =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusShare<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadShareOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/shares`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Share by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Share object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readShare =\n\t<Schema extends object, TQuery extends Query<Schema, DirectusShare<Schema>>>(\n\t\tkey: DirectusShare<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadShareOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/shares/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { ApplyQueryFields, CollectionType, Query, QueryItem, SingletonCollections } from '../../../types/index.js';\nimport { throwIfCoreCollection, throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadSingletonOutput<\n\tSchema extends object,\n\tCollection extends SingletonCollections<Schema>,\n\tTQuery extends Query<Schema, Schema[Collection]>\n> = ApplyQueryFields<Schema, CollectionType<Schema, Collection>, TQuery['fields']>;\n\n/**\n * List the singleton item in Directus.\n *\n * @param collection The collection of the items\n * @param query The query parameters\n *\n * @returns An array of up to limit item objects. If no items are available, data will be an empty array.\n * @throws Will throw if collection is a core collection\n * @throws Will throw if collection is empty\n */\nexport const readSingleton =\n\t<\n\t\tSchema extends object,\n\t\tCollection extends SingletonCollections<Schema>,\n\t\tconst TQuery extends QueryItem<Schema, Schema[Collection]>\n\t>(\n\t\tcollection: Collection,\n\t\tquery?: TQuery\n\t): RestCommand<ReadSingletonOutput<Schema, Collection, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use readSingleton for core collections');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusTranslation } from '../../../schema/translation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadTranslationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusTranslation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Translations that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Translation objects. If no items are available, data will be an empty array.\n */\nexport const readTranslations =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusTranslation<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadTranslationOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/translations`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Translation by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Translation object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readTranslation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusTranslation<Schema>>>(\n\t\tkey: DirectusTranslation<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadTranslationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/translations/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusUser } from '../../../schema/user.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadUserOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusUser<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all users that exist in Directus.\n *\n * @param query The query parameters\n *\n * @returns An array of up to limit user objects. If no items are available, data will be an empty array.\n */\nexport const readUsers =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadUserOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/users`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing user by primary key.\n *\n * @param key The primary key of the user\n * @param query The query parameters\n *\n * @returns Returns the requested user object.\n * @throws Will throw if key is empty\n */\nexport const readUser =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\tkey: DirectusUser<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadUserOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/users/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n\n/**\n * Retrieve the currently authenticated user.\n *\n * @param query The query parameters\n *\n * @returns Returns the user object for the currently authenticated user.\n */\nexport const readMe =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadUserOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/users/me`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n", "import type { DirectusVersion } from '../../../schema/version.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfEmpty } from '../../utils/index.js';\n\nexport type ReadContentVersionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusVersion<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Content Versions that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Content Version objects. If no items are available, data will be an empty array.\n */\nexport const readContentVersions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusVersion<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadContentVersionOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/versions`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing COntent Version by primary key.\n * @param key The primary key of the Content Version\n * @param query The query parameters\n * @returns Returns a Content Version object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readContentVersion =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusVersion<Schema>>>(\n\t\tkey: DirectusVersion<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadContentVersionOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { DirectusWebhook } from '../../../schema/webhook.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ReadWebhookOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusWebhook<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * List all Webhooks that exist in Directus.\n * @param query The query parameters\n * @returns An array of up to limit Webhook objects. If no items are available, data will be an empty array.\n */\nexport const readWebhooks =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusWebhook<Schema>>>(\n\t\tquery?: TQuery\n\t): RestCommand<ReadWebhookOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/webhooks`,\n\t\tparams: query ?? {},\n\t\tmethod: 'GET',\n\t});\n\n/**\n * List an existing Webhook by primary key.\n * @param key The primary key of the dashboard\n * @param query The query parameters\n * @returns Returns a Webhook object if a valid primary key was provided.\n * @throws Will throw if key is empty\n */\nexport const readWebhook =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusWebhook<Schema>>>(\n\t\tkey: DirectusWebhook<Schema>['id'],\n\t\tquery?: TQuery\n\t): RestCommand<ReadWebhookOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/webhooks/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n", "import type { RestCommand } from '../../types.js';\nimport type { SchemaDiffOutput } from './diff.js';\n\n/**\n * Update the instance's schema by passing the diff previously retrieved via /schema/diff endpoint in the request body. This endpoint is only available to admin users.\n * @param diff JSON object containing hash and diffs of collections, fields, and relations to apply.\n * @returns Empty body.\n */\nexport const schemaApply =\n\t<Schema extends object>(diff: SchemaDiffOutput): RestCommand<void, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: '/schema/apply',\n\t\tbody: JSON.stringify(diff),\n\t});\n", "import type { RestCommand } from '../../types.js';\nimport type { SchemaSnapshotOutput } from './snapshot.js';\n\n// TODO improve typing\nexport type SchemaDiffOutput = {\n\thash: string;\n\tdiff: Record<string, any>;\n};\n\n/**\n * Compare the current instance's schema against the schema snapshot in JSON request body and retrieve the difference. This endpoint is only available to admin users.\n * @param snapshot JSON object containing collections, fields, and relations to apply.\n * @param force Bypass version and database vendor restrictions.\n * @returns Returns the differences between the current instance's schema and the schema passed in the request body.\n */\nexport const schemaDiff =\n\t<Schema extends object>(snapshot: SchemaSnapshotOutput, force = false): RestCommand<SchemaDiffOutput, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: '/schema/diff',\n\t\tparams: force ? { force } : {},\n\t\tbody: JSON.stringify(snapshot),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n// TODO improve typing\nexport type SchemaSnapshotOutput = {\n\tversion: number;\n\tdirectus: string;\n\tvendor: string;\n\tcollections: Record<string, any>[];\n\tfields: Record<string, any>[];\n\trelations: Record<string, any>[];\n};\n\n/**\n * Retrieve the current schema. This endpoint is only available to admin users.\n * @returns Returns the JSON object containing schema details.\n */\nexport const schemaSnapshot =\n\t<Schema extends object>(): RestCommand<SchemaSnapshotOutput, Schema> =>\n\t() => ({\n\t\tmethod: 'GET',\n\t\tpath: '/schema/snapshot',\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Retrieve the OpenAPI spec for the current project.\n * @returns Object conforming to the OpenAPI Specification\n */\nexport const readGraphqlSdl =\n\t<Schema extends object>(scope: 'item' | 'system' = 'item'): RestCommand<string, Schema> =>\n\t() => ({\n\t\tmethod: 'GET',\n\t\tpath: scope === 'item' ? '/server/specs/graphql' : '/server/specs/graphql/system',\n\t});\n", "import type { RestCommand } from '../../types.js';\n\nexport type ServerHealthOutput = {\n\tstatus: 'ok' | 'warn' | 'error';\n\treleaseId?: string;\n\tserviceId?: string;\n\tchecks?: {\n\t\t[name: string]: Record<string, any>[];\n\t};\n};\n\n/**\n * Get the current health status of the server.\n * @returns The current health status of the server.\n */\nexport const serverHealth =\n\t<Schema extends object>(): RestCommand<ServerHealthOutput, Schema> =>\n\t() => ({\n\t\tmethod: 'GET',\n\t\tpath: '/server/health',\n\t});\n", "import type { WebSocketAuthModes } from '../../../index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type ServerInfoOutput = {\n\tproject: {\n\t\tproject_name: string;\n\t\tdefault_language: string;\n\t};\n\trateLimit?:\n\t\t| {\n\t\t\t\tpoints: number;\n\t\t\t\tduration: number;\n\t\t  }\n\t\t| false;\n\trateLimitGlobal?:\n\t\t| {\n\t\t\t\tpoints: number;\n\t\t\t\tduration: number;\n\t\t  }\n\t\t| false;\n\tqueryLimit?: {\n\t\tdefault: number;\n\t\tmax: number;\n\t};\n\twebsocket?:\n\t\t| {\n\t\t\t\trest:\n\t\t\t\t\t| {\n\t\t\t\t\t\t\tauthentication: WebSocketAuthModes;\n\t\t\t\t\t\t\tpath: string;\n\t\t\t\t\t  }\n\t\t\t\t\t| false;\n\t\t\t\tgraphql:\n\t\t\t\t\t| {\n\t\t\t\t\t\t\tauthentication: WebSocketAuthModes;\n\t\t\t\t\t\t\tpath: string;\n\t\t\t\t\t  }\n\t\t\t\t\t| false;\n\t\t\t\theartbeat: number | false;\n\t\t  }\n\t\t| false;\n};\n\n/**\n * Get information about the current installation.\n * @returns Information about the current installation.\n */\nexport const serverInfo =\n\t<Schema extends object>(): RestCommand<ServerInfoOutput, Schema> =>\n\t() => ({\n\t\tmethod: 'GET',\n\t\tpath: '/server/info',\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n// TODO can we type this?\nexport type OpenApiSpecOutput = Record<string, any>;\n\n/**\n * Retrieve the OpenAPI spec for the current project.\n * @returns Object conforming to the OpenAPI Specification\n */\nexport const readOpenApiSpec =\n\t<Schema extends object>(): RestCommand<OpenApiSpecOutput, Schema> =>\n\t() => ({\n\t\tmethod: 'GET',\n\t\tpath: '/server/specs/oas',\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Ping... pong! 🏓\n * @returns Pong\n */\nexport const serverPing =\n\t<Schema extends object>(): RestCommand<string, Schema> =>\n\t() => ({\n\t\tmethod: 'GET',\n\t\tpath: '/server/ping',\n\t});\n", "import type { DirectusActivity } from '../../../schema/activity.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateActivityOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusActivity<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Updates an existing comment by activity action primary key.\n * @param key\n * @param item\n * @param query\n * @returns Returns the activity object of the created comment.\n * @throws Will throw if key is empty\n */\nexport const updateComment =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusActivity<Schema>>>(\n\t\tkey: DirectusActivity<Schema>['id'],\n\t\titem: Partial<DirectusActivity<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateActivityOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/activity/comment/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusCollection } from '../../../schema/collection.js';\nimport type { ApplyQueryFields, NestedPartial, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateCollectionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusCollection<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update the metadata for an existing collection.\n * @param collection\n * @param item\n * @param query\n * @returns The collection object for the updated collection in this request.\n * @throws Will throw if collection is empty\n */\nexport const updateCollection =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusCollection<Schema>>>(\n\t\tcollection: DirectusCollection<Schema>['collection'],\n\t\titem: NestedPartial<DirectusCollection<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateCollectionOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/collections/${collection}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusDashboard } from '../../../schema/dashboard.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateDashboardOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusDashboard<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing dashboards.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the dashboard objects for the updated dashboards.\n * @throws Will throw if keys is empty\n */\nexport const updateDashboards =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusDashboard<Schema>>>(\n\t\tkeys: DirectusDashboard<Schema>['id'][],\n\t\titem: Partial<DirectusDashboard<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateDashboardOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/dashboards`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing dashboard.\n * @param key\n * @param item\n * @param query\n * @returns Returns the dashboard object for the updated dashboard.\n * @throws Will throw if key is empty\n */\nexport const updateDashboard =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusDashboard<Schema>>>(\n\t\tkey: DirectusDashboard<Schema>['id'],\n\t\titem: Partial<DirectusDashboard<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateDashboardOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/dashboards/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusField } from '../../../schema/field.js';\nimport type { ApplyQueryFields, NestedPartial, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateFieldOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusField<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Updates the given field in the given collection.\n * @param collection\n * @param field\n * @param item\n * @param query\n * @returns\n * @throws Will throw if collection is empty\n * @throws Will throw if field is empty\n */\nexport const updateField =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusField<Schema>>>(\n\t\tcollection: DirectusField<Schema>['collection'],\n\t\tfield: DirectusField<Schema>['field'],\n\t\titem: NestedPartial<DirectusField<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFieldOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Keys cannot be empty');\n\t\tthrowIfEmpty(field, 'Field cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/fields/${collection}/${field}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusFile } from '../../../schema/file.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateFileOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFile<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple files at the same time.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the file objects for the updated files.\n * @throws Will throw if keys is empty\n */\nexport const updateFiles =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFile<Schema>>>(\n\t\tkeys: DirectusFile<Schema>['id'][],\n\t\titem: Partial<DirectusFile<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFileOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/files`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing file, and/or replace it's file contents.\n * @param key\n * @param item\n * @param query\n * @returns Returns the file object for the updated file.\n * @throws Will throw if key is empty\n */\nexport const updateFile =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFile<Schema>>>(\n\t\tkey: DirectusFile<Schema>['id'],\n\t\titem: Partial<DirectusFile<Schema>> | FormData,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFileOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\tif (item instanceof FormData) {\n\t\t\treturn {\n\t\t\t\tpath: `/files/${key}`,\n\t\t\t\tparams: query ?? {},\n\t\t\t\tbody: item,\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\theaders: { 'Content-Type': 'multipart/form-data' },\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tpath: `/files/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusFlow } from '../../../schema/flow.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateFlowOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFlow<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing flows.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the flow objects for the updated flows.\n * @throws Will throw if keys is empty\n */\nexport const updateFlows =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFlow<Schema>>>(\n\t\tkeys: DirectusFlow<Schema>['id'][],\n\t\titem: Partial<DirectusFlow<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFlowOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/flows`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing flow.\n * @param key\n * @param item\n * @param query\n * @returns Returns the flow object for the updated flow.\n * @throws Will throw if key is empty\n */\nexport const updateFlow =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFlow<Schema>>>(\n\t\tkey: DirectusFlow<Schema>['id'],\n\t\titem: Partial<DirectusFlow<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFlowOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/flows/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusFolder } from '../../../schema/folder.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateFolderOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusFolder<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing folders.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the folder objects of the folders that were updated.\n * @throws Will throw if keys is empty\n */\nexport const updateFolders =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFolder<Schema>>>(\n\t\tkeys: DirectusFolder<Schema>['id'][],\n\t\titem: Partial<DirectusFolder<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFolderOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/folders`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing folder.\n * @param key\n * @param item\n * @param query\n * @returns Returns the folder object of the folder that was updated.\n * @throws Will throw if key is empty\n */\nexport const updateFolder =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusFolder<Schema>>>(\n\t\tkey: DirectusFolder<Schema>['id'],\n\t\titem: Partial<DirectusFolder<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateFolderOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/folders/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { ApplyQueryFields, CollectionType, Query, UnpackList } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfCoreCollection, throwIfEmpty } from '../../utils/index.js';\n\nexport type UpdateItemOutput<\n\tSchema extends object,\n\tCollection extends keyof Schema,\n\tTQuery extends Query<Schema, Schema[Collection]>\n> = ApplyQueryFields<Schema, CollectionType<Schema, Collection>, TQuery['fields']>;\n\n/**\n * Update multiple items at the same time.\n *\n * @param collection The collection of the items\n * @param keys The primary key of the items\n * @param item The item data to update\n * @param query Optional return data query\n *\n * @returns Returns the item objects for the updated items.\n * @throws Will throw if keys is empty\n * @throws Will throw if collection is empty\n * @throws Will throw if collection is a core collection\n */\nexport const updateItems =\n\t<Schema extends object, Collection extends keyof Schema, const TQuery extends Query<Schema, Schema[Collection]>>(\n\t\tcollection: Collection,\n\t\tkeys: string[] | number[],\n\t\titem: Partial<UnpackList<Schema[Collection]>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateItemOutput<Schema, Collection, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use updateItems for core collections');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing item.\n *\n * @param collection The collection of the item\n * @param key The primary key of the item\n * @param item The item data to update\n * @param query Optional return data query\n *\n * @returns Returns the item object of the item that was updated.\n * @throws Will throw if key is empty\n * @throws Will throw if collection is empty\n * @throws Will throw if collection is a core collection\n */\nexport const updateItem =\n\t<\n\t\tSchema extends object,\n\t\tCollection extends keyof Schema,\n\t\tconst TQuery extends Query<Schema, Schema[Collection]>,\n\t\tItem = UnpackList<Schema[Collection]>\n\t>(\n\t\tcollection: Collection,\n\t\tkey: string | number,\n\t\titem: Partial<Item>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateItemOutput<Schema, Collection, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use updateItem for core collections');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusNotification } from '../../../schema/notification.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateNotificationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusNotification<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing notifications.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the notification objects for the updated notifications.\n * @throws Will throw if keys is empty\n */\nexport const updateNotifications =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusNotification<Schema>>>(\n\t\tkeys: DirectusNotification<Schema>['id'][],\n\t\titem: Partial<DirectusNotification<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateNotificationOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/notifications`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing notification.\n * @param key\n * @param item\n * @param query\n * @returns Returns the notification object for the updated notification.\n * @throws Will throw if key is empty\n */\nexport const updateNotification =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusNotification<Schema>>>(\n\t\tkey: DirectusNotification<Schema>['id'],\n\t\titem: Partial<DirectusNotification<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateNotificationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/notifications/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusOperation } from '../../../schema/operation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateOperationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusOperation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing operations.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the operation objects for the updated operations.\n * @throws Will throw if keys is empty\n */\nexport const updateOperations =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusOperation<Schema>>>(\n\t\tkeys: DirectusOperation<Schema>['id'][],\n\t\titem: Partial<DirectusOperation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateOperationOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/operations`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing operation.\n * @param key\n * @param item\n * @param query\n * @returns Returns the operation object for the updated operation.\n * @throws Will throw if key is empty\n */\nexport const updateOperation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusOperation<Schema>>>(\n\t\tkey: DirectusOperation<Schema>['id'],\n\t\titem: Partial<DirectusOperation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateOperationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/operations/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusPanel } from '../../../schema/panel.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdatePanelOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPanel<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing panels.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the panel objects for the updated panels.\n * @throws Will throw if keys is empty\n */\nexport const updatePanels =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPanel<Schema>>>(\n\t\tkeys: DirectusPanel<Schema>['id'][],\n\t\titem: Partial<DirectusPanel<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdatePanelOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/panels`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing panel.\n * @param key\n * @param item\n * @param query\n * @returns Returns the panel object for the updated panel.\n * @throws Will throw if key is empty\n */\nexport const updatePanel =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPanel<Schema>>>(\n\t\tkey: DirectusPanel<Schema>['id'],\n\t\titem: Partial<DirectusPanel<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdatePanelOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/panels/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusPermission } from '../../../schema/permission.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdatePermissionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPermission<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing permissions rules.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the permission object for the updated permissions.\n * @throws Will throw if keys is empty\n */\nexport const updatePermissions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPermission<Schema>>>(\n\t\tkeys: DirectusPermission<Schema>['id'][],\n\t\titem: Partial<DirectusPermission<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdatePermissionOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/permissions`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing permissions rule.\n * @param key\n * @param item\n * @param query\n * @returns Returns the permission object for the updated permission.\n * @throws Will throw if key is empty\n */\nexport const updatePermission =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPermission<Schema>>>(\n\t\tkey: DirectusPermission<Schema>['id'],\n\t\titem: Partial<DirectusPermission<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdatePermissionOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/permissions/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusPreset } from '../../../schema/preset.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdatePresetOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusPreset<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing presets.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the preset objects for the updated presets.\n * @throws Will throw if keys is empty\n */\nexport const updatePresets =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPreset<Schema>>>(\n\t\tkeys: DirectusPreset<Schema>['id'][],\n\t\titem: Partial<DirectusPreset<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdatePresetOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/presets`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing preset.\n * @param key\n * @param item\n * @param query\n * @returns Returns the preset object for the updated preset.\n * @throws Will throw if key is empty\n */\nexport const updatePreset =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusPreset<Schema>>>(\n\t\tkey: DirectusPreset<Schema>['id'],\n\t\titem: Partial<DirectusPreset<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdatePresetOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/presets/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusRelation } from '../../../schema/relation.js';\nimport type { ApplyQueryFields, NestedPartial, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateRelationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusRelation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update an existing relation.\n * @param collection\n * @param field\n * @param item\n * @param query\n * @returns Returns the relation object for the created relation.\n */\nexport const updateRelation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRelation<Schema>>>(\n\t\tcollection: DirectusRelation<Schema>['collection'],\n\t\tfield: DirectusRelation<Schema>['field'],\n\t\titem: NestedPartial<DirectusRelation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateRelationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(collection, 'Collection cannot be empty');\n\t\tthrowIfEmpty(field, 'Field cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/relations/${collection}/${field}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusRole } from '../../../schema/role.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateRoleOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusRole<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing roles.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the role objects for the updated roles.\n * @throws Will throw if keys is empty\n */\nexport const updateRoles =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRole<Schema>>>(\n\t\tkeys: DirectusRole<Schema>['id'][],\n\t\titem: Partial<DirectusRole<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateRoleOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/roles`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing role.\n * @param key\n * @param item\n * @param query\n * @returns Returns the role object for the updated role.\n * @throws Will throw if key is empty\n */\nexport const updateRole =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusRole<Schema>>>(\n\t\tkey: DirectusRole<Schema>['id'],\n\t\titem: Partial<DirectusRole<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateRoleOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/roles/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusSettings } from '../../../schema/settings.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateSettingOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusSettings<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update Settings\n * @param item\n * @param query\n * @returns Returns the settings object.\n */\nexport const updateSettings =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusSettings<Schema>>>(\n\t\titem: Partial<DirectusSettings<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateSettingOutput<Schema, TQuery>[], Schema> =>\n\t() => ({\n\t\tpath: `/settings`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'PATCH',\n\t});\n", "import type { DirectusShare } from '../../../schema/share.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateShareOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusShare<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing shares.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the share objects for the updated shares.\n * @throws Will throw if keys is empty\n */\nexport const updateShares =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusShare<Schema>>>(\n\t\tkeys: DirectusShare<Schema>['id'][],\n\t\titem: Partial<DirectusShare<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateShareOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/shares`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing share.\n * @param key\n * @param item\n * @param query\n * @returns Returns the share object for the updated share.\n * @throws Will throw if key is empty\n */\nexport const updateShare =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusShare<Schema>>>(\n\t\tkey: DirectusShare<Schema>['id'],\n\t\titem: Partial<DirectusShare<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateShareOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/shares/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { ApplyQueryFields, CollectionType, Query, SingletonCollections } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfCoreCollection, throwIfEmpty } from '../../utils/index.js';\n\nexport type UpdateSingletonOutput<\n\tSchema extends object,\n\tCollection extends SingletonCollections<Schema>,\n\tTQuery extends Query<Schema, Schema[Collection]>\n> = ApplyQueryFields<Schema, CollectionType<Schema, Collection>, TQuery['fields']>;\n\n/**\n * Update a singleton item\n *\n * @param collection The collection of the items\n * @param query The query parameters\n *\n * @returns An array of up to limit item objects. If no items are available, data will be an empty array.\n * @throws Will throw if collection is a core collection\n * @throws Will throw if collection is empty\n */\nexport const updateSingleton =\n\t<\n\t\tSchema extends object,\n\t\tCollection extends SingletonCollections<Schema>,\n\t\tconst TQuery extends Query<Schema, Schema[Collection]>,\n\t\tItem = Schema[Collection]\n\t>(\n\t\tcollection: Collection,\n\t\titem: Partial<Item>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateSingletonOutput<Schema, Collection, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(collection), 'Collection cannot be empty');\n\t\tthrowIfCoreCollection(collection, 'Cannot use updateSingleton for core collections');\n\n\t\treturn {\n\t\t\tpath: `/items/${collection as string}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusTranslation } from '../../../schema/translation.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateTranslationOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusTranslation<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing translations.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the translation objects for the updated translations.\n * @throws Will throw if keys is empty\n */\nexport const updateTranslations =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusTranslation<Schema>>>(\n\t\tkeys: DirectusTranslation<Schema>['id'][],\n\t\titem: Partial<DirectusTranslation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateTranslationOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/translations`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing translation.\n * @param key\n * @param item\n * @param query\n * @returns Returns the translation object for the updated translation.\n * @throws Will throw if key is empty\n */\nexport const updateTranslation =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusTranslation<Schema>>>(\n\t\tkey: DirectusTranslation<Schema>['id'],\n\t\titem: Partial<DirectusTranslation<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateTranslationOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/translations/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { DirectusUser } from '../../../schema/user.js';\n\nexport type UpdateUserOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusUser<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing users.\n *\n * @param keys The primary key of the users\n * @param item The user data to update\n * @param query Optional return data query\n *\n * @returns Returns the user objects for the updated users.\n * @throws Will throw if keys is empty\n */\nexport const updateUsers =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\tkeys: DirectusUser<Schema>['id'][],\n\t\titem: Partial<DirectusUser<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateUserOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/users`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing user.\n *\n * @param key The primary key of the user\n * @param item The user data to update\n * @param query Optional return data query\n *\n * @returns Returns the user object for the updated user.\n * @throws Will throw if key is empty\n */\nexport const updateUser =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\tkey: DirectusUser<Schema>['id'],\n\t\titem: Partial<DirectusUser<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateUserOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/users/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update the authenticated user.\n *\n * @param item The user data to update\n * @param query Optional return data query\n *\n * @returns Returns the updated user object for the authenticated user.\n */\nexport const updateMe =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusUser<Schema>>>(\n\t\titem: Partial<DirectusUser<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateUserOutput<Schema, TQuery>, Schema> =>\n\t() => ({\n\t\tpath: `/users/me`,\n\t\tparams: query ?? {},\n\t\tbody: JSON.stringify(item),\n\t\tmethod: 'PATCH',\n\t});\n", "import type { DirectusVersion } from '../../../schema/version.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfEmpty } from '../../utils/index.js';\n\nexport type UpdateContentVersionOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusVersion<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing Content Versions.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the Content Version objects for the updated Content Versions.\n * @throws Will throw if keys is empty\n */\nexport const updateContentVersions =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusVersion<Schema>>>(\n\t\tkeys: DirectusVersion<Schema>['id'][],\n\t\titem: Partial<DirectusVersion<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateContentVersionOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing Content Version.\n * @param key\n * @param item\n * @param query\n * @returns Returns the Content Version object for the updated Content Version.\n * @throws Will throw if key is empty\n */\nexport const updateContentVersion =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusVersion<Schema>>>(\n\t\tkey: DirectusVersion<Schema>['id'],\n\t\titem: Partial<DirectusVersion<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateContentVersionOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(key, 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { DirectusWebhook } from '../../../schema/webhook.js';\nimport type { ApplyQueryFields, Query } from '../../../types/index.js';\nimport { throwIfEmpty } from '../../utils/index.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type UpdateWebhookOutput<\n\tSchema extends object,\n\tTQuery extends Query<Schema, Item>,\n\tItem extends object = DirectusWebhook<Schema>\n> = ApplyQueryFields<Schema, Item, TQuery['fields']>;\n\n/**\n * Update multiple existing webhooks.\n * @param keys\n * @param item\n * @param query\n * @returns Returns the webhook objects for the updated webhooks.\n * @throws Will throw if keys is empty\n */\nexport const updateWebhooks =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusWebhook<Schema>>>(\n\t\tkeys: DirectusWebhook<Schema>['id'][],\n\t\titem: Partial<DirectusWebhook<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateWebhookOutput<Schema, TQuery>[], Schema> =>\n\t() => {\n\t\tthrowIfEmpty(keys, 'Keys cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/webhooks`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify({ keys, data: item }),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n\n/**\n * Update an existing webhook.\n * @param key\n * @param item\n * @param query\n * @returns Returns the webhook object for the updated webhook.\n * @throws Will throw if key is empty\n */\nexport const updateWebhook =\n\t<Schema extends object, const TQuery extends Query<Schema, DirectusWebhook<Schema>>>(\n\t\tkey: DirectusWebhook<Schema>['id'],\n\t\titem: Partial<DirectusWebhook<Schema>>,\n\t\tquery?: TQuery\n\t): RestCommand<UpdateWebhookOutput<Schema, TQuery>, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(String(key), 'Key cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/webhooks/${key}`,\n\t\t\tparams: query ?? {},\n\t\t\tbody: JSON.stringify(item),\n\t\t\tmethod: 'PATCH',\n\t\t};\n\t};\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Resets both the data and schema cache of Directus. This endpoint is only available to admin users.\n * @returns Nothing\n */\nexport const clearCache =\n\t<Schema extends object>(): RestCommand<void, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: `/utils/cache/clear`,\n\t});\n", "import type { Query } from '../../../index.js';\nimport type { DirectusFile } from '../../../schema/file.js';\nimport type { RestCommand } from '../../types.js';\n\nexport type FileFormat = 'csv' | 'json' | 'xml' | 'yaml';\n\n/**\n * Export a larger data set to a file in the File Library\n * @returns Nothing\n */\nexport const utilsExport =\n\t<Schema extends object, TQuery extends Query<Schema, Schema[Collection]>, Collection extends keyof Schema>(\n\t\tcollection: Collection,\n\t\tformat: FileFormat,\n\t\tquery: TQuery,\n\t\tfile: Partial<DirectusFile<Schema>>\n\t): RestCommand<void, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: `/utils/export/${collection as string}`,\n\t\tbody: JSON.stringify({ format, query, file }),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n// TODO better options for ouput typing\n\n/**\n * Trigger a flow\n * @param method\n * @param id\n * @param data\n * @returns Result of the flow, if any.\n */\nexport const triggerFlow =\n\t<Schema extends object>(\n\t\tmethod: 'GET' | 'POST',\n\t\tid: string,\n\t\tdata?: Record<string, string>\n\t): RestCommand<unknown, Schema> =>\n\t() => {\n\t\tif (method === 'GET') {\n\t\t\treturn {\n\t\t\t\tpath: `/flows/trigger/${id}`,\n\t\t\t\tparams: data ?? {},\n\t\t\t\tmethod: 'GET',\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tpath: `/flows/trigger/${id}`,\n\t\t\tbody: JSON.stringify(data ?? {}),\n\t\t\tmethod: 'POST',\n\t\t};\n\t};\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Generate a hash for a given string.\n * @param string String to hash.\n * @returns Hashed string.\n */\nexport const generateHash =\n\t<Schema extends object>(string: string): RestCommand<string, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: `/utils/hash/generate`,\n\t\tbody: JSON.stringify({ string }),\n\t});\n\n/**\n * Verify a string with a hash.\n * @param string Source string.\n * @param hash Hash you want to verify against.\n * @returns Boolean.\n */\nexport const verifyHash =\n\t<Schema extends object>(string: string, hash: string): RestCommand<boolean, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: `/utils/hash/verify`,\n\t\tbody: JSON.stringify({ string, hash }),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Import multiple records from a JSON or CSV file into a collection.\n * @returns Nothing\n */\nexport const utilsImport =\n\t<Schema extends object>(collection: keyof Schema, data: FormData): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/utils/import/${collection as string}`,\n\t\tmethod: 'POST',\n\t\tbody: data,\n\t\theaders: { 'Content-Type': 'multipart/form-data' },\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n// TODO better options for ouput typing\n\n/**\n * Trigger an operation\n * @param id\n * @param data\n * @returns Result of the flow, if any.\n */\nexport const triggerOperation =\n\t<Schema extends object>(id: string, data?: any): RestCommand<unknown, Schema> =>\n\t() => ({\n\t\tpath: `/operations/trigger/${id}`,\n\t\tbody: JSON.stringify(data ?? {}),\n\t\tmethod: 'POST',\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Shares work by publicly giving you an access/refresh token combination (as you would get with the regular /auth/login endpoints). These tokens are limited to a permissions set that only allows access to the item that was shared, and any relationally linked items that that associated role has access to. This means that all regular endpoints can be used with the credentials set returned by this endpoint.\n *\n * @param share Shares work by publicly giving you an access/refresh token combination (as you would get with the regular /auth/login endpoints). These tokens are limited to a permissions set that only allows access to the item that was shared, and any relationally linked items that that associated role has access to. This means that all regular endpoints can be used with the credentials set returned by this endpoint.\n * @param password Password for the share, if one is configured.\n *\n * @returns Authentication Credentials\n */\nexport const authenticateShare =\n\t<Schema extends object>(\n\t\tshare: string,\n\t\tpassword: string\n\t): RestCommand<\n\t\t{\n\t\t\taccess_token: string;\n\t\t\trefresh_token: string;\n\t\t\texpires: number;\n\t\t},\n\t\tSchema\n\t> =>\n\t() => ({\n\t\tpath: `/shares/auth`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ share, password }),\n\t});\n\n/**\n * Sends an email to the provided email addresses with a link to the share.\n *\n * @param share Primary key of the share you're inviting people to.\n * @param emails Array of email strings to send the share link to.\n *\n * @returns Nothing\n */\nexport const inviteShare =\n\t<Schema extends object>(share: string, emails: string[]): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/shares/invite`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ share, emails }),\n\t});\n\n/**\n * Allows unauthenticated users to retrieve information about the share.\n *\n * @param id Primary key of the share you're viewing.\n *\n * @returns The share objects for the given UUID, if it's still valid.\n */\nexport const readShareInfo =\n\t<Schema extends object>(\n\t\tid: string\n\t): RestCommand<\n\t\t{\n\t\t\tid: string;\n\t\t\tcollection: string;\n\t\t\titem: string;\n\t\t\tpassword: string | null;\n\t\t\tdate_start: string | null;\n\t\t\tdate_end: string | null;\n\t\t\ttimes_used: number | null;\n\t\t\tmax_uses: number | null;\n\t\t},\n\t\tSchema\n\t> =>\n\t() => ({\n\t\tpath: `/shares/info/${id}`,\n\t\tmethod: 'GET',\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * If a collection has a sort field, this util can be used to move items in that manual order.\n * @returns Nothing\n */\nexport const utilitySort =\n\t<Schema extends object>(collection: keyof Schema, item: string, to: number): RestCommand<void, Schema> =>\n\t() => ({\n\t\tmethod: 'POST',\n\t\tpath: `/utils/sort/${collection as string}`,\n\t\tbody: JSON.stringify({ item, to }),\n\t});\n", "import type { RestCommand } from '../../types.js';\n\n/**\n * Invite a new user by email.\n *\n * @param email User email to invite.\n * @param role Role of the new user.\n * @param invite_url Provide a custom invite url which the link in the email will lead to. The invite token will be passed as a parameter.\n *\n * @returns Nothing\n */\nexport const inviteUser =\n\t<Schema extends object>(email: string, role: string, invite_url?: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/users/invite`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\temail,\n\t\t\trole,\n\t\t\t...(invite_url ? { invite_url } : {}),\n\t\t}),\n\t});\n\n/**\n * Accept your invite. The invite user endpoint sends the email a link to the Admin App.\n *\n * @param token Accept invite token.\n * @param password Password for the user.\n *\n * @returns Nothing\n */\nexport const acceptUserInvite =\n\t<Schema extends object>(token: string, password: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/users/invite/accept`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\ttoken,\n\t\t\tpassword,\n\t\t}),\n\t});\n\n/**\n * Generates a secret and returns the URL to be used in an authenticator app.\n *\n * @param password The user's password.\n *\n * @returns A two-factor secret\n */\nexport const generateTwoFactorSecret =\n\t<Schema extends object>(password: string): RestCommand<{ secret: string; otpauth_url: string }, Schema> =>\n\t() => ({\n\t\tpath: `/users/me/tfa/generate`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\tpassword,\n\t\t}),\n\t});\n\n/**\n * Adds a TFA secret to the user account.\n *\n * @param secret The TFA secret from tfa/generate.\n * @param otp OTP generated with the secret, to recheck if the user has a correct TFA setup\n *\n * @returns Nothing\n */\nexport const enableTwoFactor =\n\t<Schema extends object>(secret: string, otp: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/users/me/tfa/enable`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\tsecret,\n\t\t\totp,\n\t\t}),\n\t});\n\n/**\n * Disables two-factor authentication by removing the OTP secret from the user.\n *\n * @param otp One-time password generated by the authenticator app.\n *\n * @returns Nothing\n */\nexport const disableTwoFactor =\n\t<Schema extends object>(otp: string): RestCommand<void, Schema> =>\n\t() => ({\n\t\tpath: `/users/me/tfa/disable`,\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({ otp }),\n\t});\n", "import type { DirectusVersion } from '../../../schema/version.js';\nimport type { UnpackList } from '../../../types/index.js';\nimport type { RestCommand } from '../../types.js';\nimport { throwIfEmpty } from '../../utils/index.js';\n\n/**\n * Save item changes to an existing Content Version.\n *\n * @param id Primary key of the Content Version.\n * @param item The item changes to save to the specified Content Version.\n *\n * @returns State of the item after save.\n */\nexport const saveToContentVersion =\n\t<Schema extends object, Collection extends keyof Schema, Item = UnpackList<Schema[Collection]>>(\n\t\tid: DirectusVersion<Schema>['id'],\n\t\titem: Partial<Item>\n\t): RestCommand<Item, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(id, 'ID cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions/${id}/save`,\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(item),\n\t\t};\n\t};\n\n/**\n * Compare an existing Content Version with the main version of the item.\n *\n * @param id Primary key of the Content Version.\n *\n * @returns All fields with different values, along with the hash of the main version of the item and the information\nwhether the Content Version is outdated (i.e. main version of the item has been updated since the creation of the\nContent Version)\n */\nexport const compareContentVersion =\n\t<Schema extends object, Collection extends keyof Schema, Item = UnpackList<Schema[Collection]>>(\n\t\tid: DirectusVersion<Schema>['id']\n\t): RestCommand<\n\t\t{\n\t\t\toutdated: boolean;\n\t\t\tmainHash: string;\n\t\t\tcurrent: Partial<Item>;\n\t\t\tmain: Item;\n\t\t},\n\t\tSchema\n\t> =>\n\t() => {\n\t\tthrowIfEmpty(id, 'ID cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions/${id}/compare`,\n\t\t\tmethod: 'GET',\n\t\t};\n\t};\n\n/**\n * Promote an existing Content Version to become the new main version of the item.\n *\n * @param id Primary key of the version.\n * @param mainHash The current hash of the main version of the item (obtained from the `compare` endpoint).\n * @param fields Optional array of field names of which the values are to be promoted. By default, all fields are selected.\n *\n * @returns The primary key of the promoted item.\n */\nexport const promoteContentVersion =\n\t<Schema extends object, Collection extends keyof Schema, Item = UnpackList<Schema[Collection]>>(\n\t\tid: DirectusVersion<Schema>['id'],\n\t\tmainHash: string,\n\t\tfields?: (keyof UnpackList<Item>)[]\n\t): RestCommand<string | number, Schema> =>\n\t() => {\n\t\tthrowIfEmpty(id, 'ID cannot be empty');\n\n\t\treturn {\n\t\t\tpath: `/versions/${id}/promote`,\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(fields ? { mainHash, fields } : { mainHash }),\n\t\t};\n\t};\n", "import type { StaticTokenClient } from '../auth/types.js';\nimport type { DirectusClient } from '../types/client.js';\nimport { getRequestUrl } from '../utils/get-request-url.js';\nimport { request } from '../utils/request.js';\nimport type { RestClient, RestCommand, RestConfig } from './types.js';\n\nconst defaultConfigValues: RestConfig = {};\n\n/**\n * Creates a client to communicate with the Directus REST API.\n *\n * @returns A Directus REST client.\n */\nexport const rest = (config: Partial<RestConfig> = {}) => {\n\treturn <Schema extends object>(client: DirectusClient<Schema>): RestClient<Schema> => {\n\t\tconst restConfig = { ...defaultConfigValues, ...config };\n\t\treturn {\n\t\t\tasync request<Output = any>(getOptions: RestCommand<Output, Schema>): Promise<Output> {\n\t\t\t\tconst options = getOptions();\n\n\t\t\t\t// all api requests require this content type\n\t\t\t\tif (!options.headers) {\n\t\t\t\t\toptions.headers = {};\n\t\t\t\t}\n\n\t\t\t\tif ('Content-Type' in options.headers === false) {\n\t\t\t\t\toptions.headers['Content-Type'] = 'application/json';\n\t\t\t\t} else if (options.headers['Content-Type'] === 'multipart/form-data') {\n\t\t\t\t\t// let the fetch function deal with multipart boundaries\n\t\t\t\t\tdelete options.headers['Content-Type'];\n\t\t\t\t}\n\n\t\t\t\t// we need to use THIS here instead of client to access overridden functions\n\t\t\t\tif ('getToken' in this) {\n\t\t\t\t\tconst token = await (this.getToken as StaticTokenClient<Schema>['getToken'])();\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tif (!options.headers) options.headers = {};\n\t\t\t\t\t\toptions.headers['Authorization'] = `Bearer ${token}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst requestUrl = getRequestUrl(client.url, options.path, options.params);\n\n\t\t\t\tlet fetchOptions: RequestInit = {\n\t\t\t\t\tmethod: options.method ?? 'GET',\n\t\t\t\t\theaders: options.headers ?? {},\n\t\t\t\t};\n\n\t\t\t\tif ('credentials' in restConfig) {\n\t\t\t\t\tfetchOptions.credentials = restConfig.credentials;\n\t\t\t\t}\n\n\t\t\t\tif (options.body) {\n\t\t\t\t\tfetchOptions['body'] = options.body;\n\t\t\t\t}\n\n\t\t\t\t// apply onRequest hook from command\n\t\t\t\tif (options.onRequest) {\n\t\t\t\t\tfetchOptions = await options.onRequest(fetchOptions);\n\t\t\t\t}\n\n\t\t\t\t// apply global onRequest hook\n\t\t\t\tif (restConfig.onRequest) {\n\t\t\t\t\tfetchOptions = await restConfig.onRequest(fetchOptions);\n\t\t\t\t}\n\n\t\t\t\tlet result = await request<Output>(requestUrl.toString(), fetchOptions, client.globals.fetch);\n\n\t\t\t\t// apply onResponse hook from command\n\t\t\t\tif ('onResponse' in options) {\n\t\t\t\t\tresult = await options.onResponse(result, fetchOptions);\n\t\t\t\t}\n\n\t\t\t\t// apply global onResponse hook\n\t\t\t\tif ('onResponse' in config) {\n\t\t\t\t\tresult = await config.onResponse(result, fetchOptions);\n\t\t\t\t}\n\n\t\t\t\treturn result as Output;\n\t\t\t},\n\t\t};\n\t};\n};\n", "import type { RequestTransformer } from '../../index.js';\nimport type { RestCommand } from '../types.js';\n\n/**\n * Add arbitrary options to a fetch request\n *\n * @param getOptions\n * @param onRequest\n *\n * @returns\n */\nexport function withOptions<Schema extends object, Output>(\n\tgetOptions: RestCommand<Output, Schema>,\n\textraOptions: RequestTransformer | Partial<RequestInit>\n): RestCommand<Output, Schema> {\n\treturn () => {\n\t\tconst options = getOptions();\n\n\t\tif (typeof extraOptions === 'function') {\n\t\t\toptions.onRequest = extraOptions;\n\t\t} else {\n\t\t\toptions.onRequest = (options) => ({\n\t\t\t\t...options,\n\t\t\t\t...extraOptions,\n\t\t\t});\n\t\t}\n\n\t\treturn options;\n\t};\n}\n", "import type { RestCommand } from '../types.js';\n\nexport function withSearch<Schema extends object, Output>(\n\tgetOptions: RestCommand<Output, Schema>\n): RestCommand<Output, Schema> {\n\treturn () => {\n\t\tconst options = getOptions();\n\n\t\tif (options.method === 'GET') {\n\t\t\toptions.method = 'SEARCH';\n\t\t\toptions.body = JSON.stringify({ query: options.params });\n\t\t\tdelete options.params;\n\t\t}\n\n\t\treturn options;\n\t};\n}\n", "import type { RestCommand } from '../types.js';\n\nexport function withToken<Schema extends object, Output>(\n\ttoken: string,\n\tgetOptions: RestCommand<Output, Schema>\n): RestCommand<Output, Schema> {\n\treturn () => {\n\t\tconst options = getOptions();\n\n\t\tif (token) {\n\t\t\tif (!options.headers) options.headers = {};\n\t\t\toptions.headers['Authorization'] = `Bearer ${token}`;\n\t\t}\n\n\t\treturn options;\n\t};\n}\n", "import { queryToParams } from '../index.js';\n\nconst SEPARATOR = '/';\n\nconst mergePaths = (a: string, b: string) => {\n\tif (a.endsWith(SEPARATOR)) a = a.slice(0, -1);\n\tif (!b.startsWith(SEPARATOR)) b = SEPARATOR + b;\n\treturn a + b;\n};\n\n/**\n * Build URL based on provided options\n *\n * @param baseUrl The base URL\n * @param options The request options\n *\n * @returns URL\n */\nexport const getRequestUrl = (baseUrl: URL, path: string, params?: Record<string, any>): URL => {\n\tconst newPath = baseUrl.pathname === SEPARATOR ? path : mergePaths(baseUrl.pathname, path);\n\tconst url = new globalThis.URL(newPath, baseUrl);\n\n\tif (params) {\n\t\tfor (const [k, v] of Object.entries(queryToParams(params))) {\n\t\t\tif (v && typeof v === 'object' && !Array.isArray(v)) {\n\t\t\t\tfor (const [k2, v2] of Object.entries(v)) {\n\t\t\t\t\turl.searchParams.set(`${k}[${k2}]`, String(v2));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\turl.searchParams.set(k, v);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn url;\n};\n", "import type { AuthenticationStorage, AuthenticationData } from '../types.js';\n\n/**\n * Simple memory storage implementation\n *\n * @returns AuthenticationStorage\n */\nexport const memoryStorage = () => {\n\tlet store: AuthenticationData | null = null;\n\n\treturn {\n\t\tget: async () => store,\n\t\tset: async (value: AuthenticationData | null) => {\n\t\t\tstore = value;\n\t\t},\n\t} as AuthenticationStorage;\n};\n", "import type { LoginOptions } from '../index.js';\nimport type { DirectusClient } from '../types/client.js';\nimport { getRequestUrl } from '../utils/get-request-url.js';\nimport { request } from '../utils/request.js';\nimport type { AuthenticationClient, AuthenticationConfig, AuthenticationData, AuthenticationMode } from './types.js';\nimport { memoryStorage } from './utils/memory-storage.js';\n\nconst defaultConfigValues: AuthenticationConfig = {\n\tmsRefreshBeforeExpires: 30000, // 30 seconds\n\tautoRefresh: true,\n};\n\n/**\n * Creates a client to authenticate with Directus.\n *\n * @param mode AuthenticationMode\n * @param config The optional configuration.\n *\n * @returns A Directus authentication client.\n */\nexport const authentication = (mode: AuthenticationMode = 'cookie', config: Partial<AuthenticationConfig> = {}) => {\n\treturn <Schema extends object>(client: DirectusClient<Schema>): AuthenticationClient<Schema> => {\n\t\tconst authConfig = { ...defaultConfigValues, ...config };\n\t\tlet refreshPromise: Promise<AuthenticationData> | null = null;\n\t\tlet refreshTimeout: NodeJS.Timer | null = null;\n\t\tconst storage = authConfig.storage ?? memoryStorage();\n\n\t\tconst resetStorage = () => {\n\t\t\tstorage.set({ access_token: null, refresh_token: null, expires: null, expires_at: null });\n\t\t};\n\n\t\tconst activeRefresh = async () => {\n\t\t\ttry {\n\t\t\t\tawait refreshPromise;\n\t\t\t} finally {\n\t\t\t\trefreshPromise = null;\n\t\t\t}\n\t\t};\n\n\t\tconst refreshIfExpired = async () => {\n\t\t\tconst authData = await storage.get();\n\n\t\t\tif (refreshPromise || !authData?.expires_at) {\n\t\t\t\tawait activeRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (authData.expires_at < new Date().getTime() + authConfig.msRefreshBeforeExpires) {\n\t\t\t\trefresh().catch((_err) => {\n\t\t\t\t\t/* throw err; */\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tawait activeRefresh();\n\t\t};\n\n\t\tconst setCredentials = (data: AuthenticationData) => {\n\t\t\tconst expires = data.expires ?? 0;\n\t\t\tdata.expires_at = new Date().getTime() + expires;\n\t\t\tstorage.set(data);\n\n\t\t\tif (authConfig.autoRefresh && expires > authConfig.msRefreshBeforeExpires && expires < Number.MAX_SAFE_INTEGER) {\n\t\t\t\tif (refreshTimeout) clearTimeout(refreshTimeout);\n\n\t\t\t\trefreshTimeout = setTimeout(() => {\n\t\t\t\t\trefreshTimeout = null;\n\n\t\t\t\t\trefresh().catch((_err) => {\n\t\t\t\t\t\t/* throw err; */\n\t\t\t\t\t});\n\t\t\t\t}, expires - authConfig.msRefreshBeforeExpires);\n\t\t\t}\n\t\t};\n\n\t\tconst refresh = async () => {\n\t\t\tconst awaitRefresh = async () => {\n\t\t\t\tconst authData = await storage.get();\n\t\t\t\tresetStorage();\n\n\t\t\t\tconst fetchOptions: RequestInit = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif ('credentials' in authConfig) {\n\t\t\t\t\tfetchOptions.credentials = authConfig.credentials;\n\t\t\t\t}\n\n\t\t\t\tconst body: Record<string, any> = { mode };\n\n\t\t\t\tif (mode === 'json' && authData?.refresh_token) {\n\t\t\t\t\tbody['refresh_token'] = authData.refresh_token;\n\t\t\t\t}\n\n\t\t\t\tfetchOptions.body = JSON.stringify(body);\n\n\t\t\t\tconst requestUrl = getRequestUrl(client.url, '/auth/refresh');\n\n\t\t\t\tconst data = await request<AuthenticationData>(requestUrl.toString(), fetchOptions, client.globals.fetch);\n\n\t\t\t\tsetCredentials(data);\n\t\t\t\treturn data;\n\t\t\t};\n\n\t\t\trefreshPromise = awaitRefresh().catch((err) => {\n\t\t\t\tthrow err;\n\t\t\t});\n\n\t\t\treturn refreshPromise;\n\t\t};\n\n\t\treturn {\n\t\t\trefresh,\n\t\t\tasync login(email: string, password: string, options: LoginOptions = {}) {\n\t\t\t\t// TODO: allow for websocket only authentication\n\t\t\t\tresetStorage();\n\n\t\t\t\tconst requestUrl = getRequestUrl(client.url, '/auth/login');\n\n\t\t\t\tconst authData: Record<string, string> = { email, password };\n\t\t\t\tif ('otp' in options) authData['otp'] = options.otp;\n\t\t\t\tauthData['mode'] = options.mode ?? mode;\n\n\t\t\t\tconst fetchOptions: RequestInit = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(authData),\n\t\t\t\t};\n\n\t\t\t\tif ('credentials' in authConfig) {\n\t\t\t\t\tfetchOptions.credentials = authConfig.credentials;\n\t\t\t\t}\n\n\t\t\t\tconst data = await request<AuthenticationData>(requestUrl.toString(), fetchOptions, client.globals.fetch);\n\n\t\t\t\tsetCredentials(data);\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tasync logout() {\n\t\t\t\tconst authData = await storage.get();\n\n\t\t\t\tconst fetchOptions: RequestInit = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif ('credentials' in authConfig) {\n\t\t\t\t\tfetchOptions.credentials = authConfig.credentials;\n\t\t\t\t}\n\n\t\t\t\tif (mode === 'json' && authData?.refresh_token) {\n\t\t\t\t\tfetchOptions.body = JSON.stringify({\n\t\t\t\t\t\trefresh_token: authData.refresh_token,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst requestUrl = getRequestUrl(client.url, '/auth/logout');\n\t\t\t\tawait request(requestUrl.toString(), fetchOptions, client.globals.fetch);\n\n\t\t\t\tif (refreshTimeout) clearTimeout(refreshTimeout);\n\t\t\t\tresetStorage();\n\t\t\t},\n\t\t\tasync getToken() {\n\t\t\t\tawait refreshIfExpired();\n\n\t\t\t\tconst data = await storage.get();\n\t\t\t\treturn data?.access_token ?? null;\n\t\t\t},\n\t\t\tsetToken(access_token: string | null) {\n\t\t\t\tstorage.set({\n\t\t\t\t\taccess_token,\n\t\t\t\t\trefresh_token: null,\n\t\t\t\t\texpires: null,\n\t\t\t\t\texpires_at: null,\n\t\t\t\t});\n\t\t\t},\n\t\t};\n\t};\n};\n", "import type { DirectusClient } from '../types/client.js';\nimport type { StaticTokenClient } from './types.js';\n\n/**\n * Creates a client to authenticate with Directus using a static token.\n *\n * @param token static token.\n *\n * @returns A Directus static token client.\n */\nexport const staticToken = (access_token: string) => {\n\treturn <Schema extends object>(_client: DirectusClient<Schema>): StaticTokenClient<Schema> => {\n\t\tlet token: string | null = access_token ?? null;\n\t\treturn {\n\t\t\tasync getToken() {\n\t\t\t\treturn token;\n\t\t\t},\n\t\t\tsetToken(access_token: string | null) {\n\t\t\t\ttoken = access_token;\n\t\t\t},\n\t\t};\n\t};\n};\n", "export interface EmailAuth {\n\temail: string;\n\tpassword: string;\n\tuid?: string;\n}\nexport interface TokenAuth {\n\taccess_token: string;\n\tuid?: string;\n}\nexport interface RefreshAuth {\n\trefresh_token: string;\n\tuid?: string;\n}\n\nexport function auth(creds: EmailAuth | TokenAuth | RefreshAuth) {\n\treturn JSON.stringify({ ...creds, type: 'auth' });\n}\n", "export const pong = () => JSON.stringify({ type: 'pong' });\n", "import type { WebSocketInterface } from '../../index.js';\n\ninterface WebSocketListener {\n\t(data: MessageEvent<string>): any;\n}\n\n/**\n * Wait for a websocket response\n *\n * @param socket WebSocket\n * @param number timeout\n *\n * @returns Incoming message object\n */\nexport const messageCallback = (socket: WebSocketInterface, timeout = 1000) =>\n\tnew Promise<Record<string, any> | MessageEvent<string> | undefined>((resolve, reject) => {\n\t\tconst handler: WebSocketListener = (data: MessageEvent<string>) => {\n\t\t\ttry {\n\t\t\t\tconst message = JSON.parse(data.data) as Record<string, any>;\n\n\t\t\t\tif (typeof message === 'object' && !Array.isArray(message) && message !== null) {\n\t\t\t\t\tunbind();\n\t\t\t\t\tresolve(message);\n\t\t\t\t} else {\n\t\t\t\t\tunbind();\n\t\t\t\t\tabort();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// return the original event to allow customization\n\t\t\t\tunbind();\n\t\t\t\tresolve(data);\n\t\t\t}\n\t\t};\n\n\t\tconst abort = () => reject();\n\n\t\tconst unbind = () => {\n\t\t\tclearTimeout(timer);\n\t\t\tsocket.removeEventListener('message', handler);\n\t\t\tsocket.removeEventListener('error', abort);\n\t\t\tsocket.removeEventListener('close', abort);\n\t\t};\n\n\t\tsocket.addEventListener('message', handler);\n\t\tsocket.addEventListener('error', abort);\n\t\tsocket.addEventListener('close', abort);\n\n\t\tconst timer = setTimeout(() => {\n\t\t\tunbind();\n\t\t\tresolve(undefined);\n\t\t}, timeout);\n\t});\n", "/**\n * Fallback generator function to get increment id's for subscriptions\n */\nexport function* generateUid(): Generator<string, string, unknown> {\n\tlet uid = 1;\n\n\twhile (true) {\n\t\tyield String(uid);\n\t\tuid++;\n\t}\n}\n", "import type { DirectusClient } from '../types/client.js';\nimport type {\n\tSubscribeOptions,\n\tSubscriptionEvents,\n\tSubscriptionOutput,\n\tWebSocketClient,\n\tWebSocketConfig,\n\tWebSocketEventHandler,\n\tWebSocketEvents,\n} from './types.js';\nimport { messageCallback } from './utils/message-callback.js';\nimport { generateUid } from './utils/generate-uid.js';\nimport { pong } from './commands/pong.js';\nimport { auth } from './commands/auth.js';\nimport type { AuthenticationClient } from '../auth/types.js';\nimport { sleep } from './index.js';\nimport type { WebSocketInterface } from '../index.js';\n\ntype AuthWSClient<Schema extends object> = WebSocketClient<Schema> & AuthenticationClient<Schema>;\n\nconst defaultRealTimeConfig: WebSocketConfig = {\n\tauthMode: 'handshake',\n\theartbeat: true,\n\treconnect: {\n\t\tdelay: 1000, // 1 second\n\t\tretries: 10,\n\t},\n};\n\nconst WebSocketState = {\n\tOPEN: 1,\n\tCLOSED: 3,\n} as const;\n\n/**\n * Creates a client to communicate with a Directus REST WebSocket.\n *\n * @param config The optional configuration.\n *\n * @returns A Directus realtime client.\n */\nexport function realtime(config: WebSocketConfig = {}) {\n\treturn <Schema extends object>(client: DirectusClient<Schema>) => {\n\t\tconfig = { ...defaultRealTimeConfig, ...config };\n\t\tlet socket: WebSocketInterface | null = null;\n\t\tlet uid = generateUid();\n\t\tlet reconnectAttempts = 0;\n\t\tlet reconnecting = false;\n\n\t\tconst hasAuth = (client: AuthWSClient<Schema>) => 'getToken' in client;\n\n\t\tconst withStrictAuth = async (url: URL, currentClient: AuthWSClient<Schema>) => {\n\t\t\tif (config.authMode === 'strict' && hasAuth(currentClient)) {\n\t\t\t\tconst token = await currentClient.getToken();\n\t\t\t\tif (token) url.searchParams.set('access_token', token);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tconst getSocketUrl = async (currentClient: AuthWSClient<Schema>) => {\n\t\t\tif ('url' in config) return await withStrictAuth(new client.globals.URL(config.url), currentClient);\n\n\t\t\t// if the main URL is a websocket URL use it directly!\n\t\t\tif (['ws:', 'wss:'].includes(client.url.protocol)) {\n\t\t\t\treturn await withStrictAuth(client.url, currentClient);\n\t\t\t}\n\n\t\t\t// try filling in the defaults based on the main URL\n\t\t\tconst newUrl = new client.globals.URL(client.url.toString());\n\t\t\tnewUrl.protocol = client.url.protocol === 'https:' ? 'wss:' : 'ws:';\n\t\t\tnewUrl.pathname = '/websocket';\n\n\t\t\treturn await withStrictAuth(newUrl, currentClient);\n\t\t};\n\n\t\tconst resetConnection = () => {\n\t\t\tsocket = null;\n\t\t\tuid = generateUid();\n\t\t};\n\n\t\tfunction reconnect(this: WebSocketClient<Schema>) {\n\t\t\t// try to reconnect\n\t\t\tif (config.reconnect && !reconnecting && reconnectAttempts < config.reconnect.retries) {\n\t\t\t\treconnecting = true;\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\treconnectAttempts += 1;\n\n\t\t\t\t\tthis.connect()\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\treconnectAttempts = 0;\n\t\t\t\t\t\t\treconnecting = false;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t/* failed to connect */\n\t\t\t\t\t\t});\n\t\t\t\t}, Math.max(1, config.reconnect.delay));\n\t\t\t} else {\n\t\t\t\treconnecting = false;\n\t\t\t}\n\t\t}\n\n\t\tconst eventHandlers: Record<WebSocketEvents, Set<WebSocketEventHandler>> = {\n\t\t\topen: new Set<WebSocketEventHandler>([]),\n\t\t\terror: new Set<WebSocketEventHandler>([]),\n\t\t\tclose: new Set<WebSocketEventHandler>([]),\n\t\t\tmessage: new Set<WebSocketEventHandler>([]),\n\t\t};\n\n\t\tconst handleMessages = async (ws: WebSocketInterface, currentClient: AuthWSClient<Schema>) => {\n\t\t\twhile (ws.readyState !== WebSocketState.CLOSED) {\n\t\t\t\tconst message = await messageCallback(ws).catch(() => {\n\t\t\t\t\t/* ignore invalid messages */\n\t\t\t\t});\n\n\t\t\t\tif (!message) continue;\n\n\t\t\t\tif ('type' in message) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tmessage['type'] === 'auth' &&\n\t\t\t\t\t\t'status' in message &&\n\t\t\t\t\t\tmessage['status'] === 'error' &&\n\t\t\t\t\t\t'error' in message\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (message['error'] === 'TOKEN_EXPIRED' && hasAuth(currentClient)) {\n\t\t\t\t\t\t\tconst access_token = await currentClient.getToken();\n\n\t\t\t\t\t\t\tif (access_token) {\n\t\t\t\t\t\t\t\tws.send(auth({ access_token }));\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (message['error'] === 'AUTH_TIMEOUT') {\n\t\t\t\t\t\t\tws.close();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (config.heartbeat && message['type'] === 'ping') {\n\t\t\t\t\t\tws.send(pong());\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\teventHandlers['message'].forEach((handler) => handler.call(ws, message));\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tasync connect() {\n\t\t\t\t// we need to use THIS here instead of client to access overridden functions\n\t\t\t\tconst self = this as AuthWSClient<Schema>;\n\t\t\t\tconst url = await getSocketUrl(self);\n\n\t\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\t\tlet resolved = false;\n\t\t\t\t\tconst ws = new client.globals.WebSocket(url);\n\n\t\t\t\t\tws.addEventListener('open', async (evt: Event) => {\n\t\t\t\t\t\tif (config.authMode === 'handshake' && hasAuth(self)) {\n\t\t\t\t\t\t\tconst access_token = await self.getToken();\n\n\t\t\t\t\t\t\tif (access_token) ws.send(auth({ access_token }));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolved = true;\n\t\t\t\t\t\teventHandlers['open'].forEach((handler) => handler.call(ws, evt));\n\n\t\t\t\t\t\thandleMessages(ws, self);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\n\t\t\t\t\tws.addEventListener('error', (evt: Event) => {\n\t\t\t\t\t\teventHandlers['error'].forEach((handler) => handler.call(ws, evt));\n\t\t\t\t\t\tws.close();\n\t\t\t\t\t\tif (!resolved) reject(evt);\n\t\t\t\t\t});\n\n\t\t\t\t\tws.addEventListener('close', (evt: CloseEvent) => {\n\t\t\t\t\t\teventHandlers['close'].forEach((handler) => handler.call(ws, evt));\n\t\t\t\t\t\tresetConnection();\n\t\t\t\t\t\treconnect.call(this);\n\t\t\t\t\t\tif (!resolved) reject(evt);\n\t\t\t\t\t});\n\n\t\t\t\t\tsocket = ws;\n\t\t\t\t});\n\t\t\t},\n\t\t\tdisconnect() {\n\t\t\t\tif (socket && socket?.readyState === WebSocketState.OPEN) {\n\t\t\t\t\tsocket.close();\n\t\t\t\t}\n\n\t\t\t\tsocket = null;\n\t\t\t},\n\t\t\tonWebSocket(event: WebSocketEvents, callback: (this: WebSocketInterface, ev: Event | CloseEvent | any) => any) {\n\t\t\t\tif (event === 'message') {\n\t\t\t\t\t// add some message parsing\n\t\t\t\t\tconst updatedCallback = function (this: WebSocketInterface, event: MessageEvent<any>) {\n\t\t\t\t\t\tif (typeof event.data !== 'string') return callback.call(this, event);\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn callback.call(this, JSON.parse(event.data));\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\treturn callback.call(this, event);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\teventHandlers[event].add(updatedCallback);\n\t\t\t\t\treturn () => eventHandlers[event].delete(updatedCallback);\n\t\t\t\t}\n\n\t\t\t\teventHandlers[event].add(callback);\n\t\t\t\treturn () => eventHandlers[event].delete(callback);\n\t\t\t},\n\t\t\tsendMessage(message: string | Record<string, any>) {\n\t\t\t\tif (!socket || socket?.readyState !== WebSocketState.OPEN) {\n\t\t\t\t\t// TODO use directus error\n\t\t\t\t\tthrow new Error('websocket connection not OPEN');\n\t\t\t\t}\n\n\t\t\t\tif (typeof message === 'string') {\n\t\t\t\t\tsocket.send(message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ('uid' in message === false) {\n\t\t\t\t\tmessage['uid'] = uid.next().value;\n\t\t\t\t}\n\n\t\t\t\tsocket?.send(JSON.stringify(message));\n\t\t\t},\n\t\t\tasync subscribe<Collection extends keyof Schema, const Options extends SubscribeOptions<Schema, Collection>>(\n\t\t\t\tcollection: Collection,\n\t\t\t\toptions = {} as Options\n\t\t\t) {\n\t\t\t\tif (!socket || socket.readyState !== WebSocketState.OPEN) await this.connect();\n\t\t\t\tif ('uid' in options === false) options.uid = uid.next().value;\n\n\t\t\t\tlet subscribed = true;\n\t\t\t\tconst ws = socket!;\n\t\t\t\tconst send = (obj: Record<string, any>) => ws.send(JSON.stringify(obj));\n\n\t\t\t\tsend({ ...options, collection, type: 'subscribe' });\n\n\t\t\t\tasync function* subscriptionGenerator(): AsyncGenerator<\n\t\t\t\t\tSubscriptionOutput<Schema, Collection, Options['query'], SubscriptionEvents>,\n\t\t\t\t\tvoid,\n\t\t\t\t\tunknown\n\t\t\t\t> {\n\t\t\t\t\twhile (subscribed && ws && ws.readyState === WebSocketState.OPEN) {\n\t\t\t\t\t\tconst message = await messageCallback(ws).catch(() => {\n\t\t\t\t\t\t\t/* let the loop continue */\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (!message) continue;\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t'type' in message &&\n\t\t\t\t\t\t\t'status' in message &&\n\t\t\t\t\t\t\tmessage['type'] === 'subscribe' &&\n\t\t\t\t\t\t\tmessage['status'] === 'error'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthrow message;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t'type' in message &&\n\t\t\t\t\t\t\t'uid' in message &&\n\t\t\t\t\t\t\tmessage['type'] === 'subscription' &&\n\t\t\t\t\t\t\tmessage['uid'] === options.uid\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tyield message as SubscriptionOutput<Schema, Collection, Options['query'], SubscriptionEvents>;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (config.reconnect && reconnecting) {\n\t\t\t\t\t\twhile (reconnecting) await sleep(10);\n\n\t\t\t\t\t\tif (socket && socket.readyState === WebSocketState.OPEN) {\n\t\t\t\t\t\t\t// re-subscribe on the new connection\n\t\t\t\t\t\t\tsocket.send(JSON.stringify({ ...options, collection, type: 'subscribe' }));\n\n\t\t\t\t\t\t\tyield* subscriptionGenerator();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tsubscription: subscriptionGenerator(),\n\t\t\t\t\tunsubscribe() {\n\t\t\t\t\t\tsend({ uid: options.uid, type: 'unsubscribe' });\n\t\t\t\t\t\tsubscribed = false;\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t} as WebSocketClient<Schema>;\n\t};\n}\n", "/**\n * Wait for a certain amount of ms\n * @param delay number in MS\n * @returns void\n */\nexport const sleep = (delay: number) => new Promise<void>((resolve) => setTimeout(() => resolve(), delay));\n"],
  "mappings": "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",
  "names": ["defaultGlobals", "createDirectus", "url", "options", "globals", "createExtension", "isFetchResponse", "result", "extractData", "response", "type", "request", "fetcher", "reason", "defaultConfigValues", "graphql", "config", "client", "gqlConfig", "query", "variables", "scope", "fetchOptions", "headers", "token", "requestPath", "requestUrl", "getRequestUrl", "login", "email", "password", "data", "logout", "refresh_token", "passwordRequest", "reset_url", "passwordReset", "readProviders", "refresh", "mode", "createComment", "item", "createCollection", "createDashboards", "items", "createDashboard", "createField", "collection", "uploadFiles", "importFile", "createFlows", "createFlow", "createFolders", "createFolder", "createItems", "_collection", "createItem", "createNotifications", "createNotification", "createOperations", "createOperation", "createPanels", "createPanel", "createPermissions", "createPermission", "createPresets", "createPreset", "createRelation", "createRoles", "createRole", "createShares", "createShare", "createTranslations", "createTranslation", "createUsers", "createUser", "createContentVersions", "createContentVersion", "createWebhooks", "createWebhook", "deleteComment", "key", "deleteCollection", "queryToParams", "params", "walkFields", "value", "chain", "nestedField", "fields", "throwIfEmpty", "message", "throwIfCoreCollection", "deleteDashboards", "keys", "deleteDashboard", "deleteField", "field", "deleteFiles", "deleteFile", "deleteFlows", "deleteFlow", "deleteFolders", "deleteFolder", "deleteItems", "keysOrQuery", "payload", "deleteItem", "deleteNotifications", "deleteNotification", "deleteOperations", "deleteOperation", "deletePanels", "deletePanel", "deletePermissions", "deletePermission", "deletePresets", "deletePreset", "deleteRelation", "deleteRoles", "deleteRole", "deleteShares", "deleteShare", "deleteTranslations", "deleteTranslation", "deleteUsers", "deleteUser", "deleteContentVersions", "deleteContentVersion", "deleteWebhooks", "deleteWebhook", "readActivities", "readActivity", "aggregate", "collectionName", "readAssetRaw", "readAssetBlob", "readAssetArrayBuffer", "readCollections", "readCollection", "readDashboards", "readDashboard", "readExtensions", "readFields", "readFieldsByCollection", "readField", "readFiles", "readFile", "readFlows", "readFlow", "readFolders", "readFolder", "readItems", "readItem", "readNotifications", "readNotification", "readOperations", "readOperation", "readPanels", "readPanel", "readPermissions", "readPermission", "readPresets", "readPreset", "readRelations", "readRelationByCollection", "readRelation", "readRevisions", "readRevision", "readRoles", "readRole", "readSettings", "readShares", "readShare", "readSingleton", "readTranslations", "readTranslation", "readUsers", "readUser", "readMe", "readContentVersions", "readContentVersion", "readWebhooks", "readWebhook", "schemaApply", "diff", "schemaDiff", "snapshot", "force", "schemaSnapshot", "readGraphqlSdl", "serverHealth", "serverInfo", "readOpenApiSpec", "serverPing", "updateComment", "updateCollection", "updateDashboards", "updateDashboard", "updateField", "updateFiles", "updateFile", "updateFlows", "updateFlow", "updateFolders", "updateFolder", "updateItems", "updateItem", "updateNotifications", "updateNotification", "updateOperations", "updateOperation", "updatePanels", "updatePanel", "updatePermissions", "updatePermission", "updatePresets", "updatePreset", "updateRelation", "updateRoles", "updateRole", "updateSettings", "updateShares", "updateShare", "updateSingleton", "updateTranslations", "updateTranslation", "updateUsers", "updateUser", "updateMe", "updateContentVersions", "updateContentVersion", "updateWebhooks", "updateWebhook", "clearCache", "utilsExport", "format", "file", "triggerFlow", "method", "id", "generateHash", "string", "verifyHash", "hash", "utilsImport", "triggerOperation", "authenticateShare", "share", "inviteShare", "emails", "readShareInfo", "utilitySort", "to", "inviteUser", "role", "invite_url", "acceptUserInvite", "generateTwoFactorSecret", "enableTwoFactor", "secret", "otp", "disableTwoFactor", "saveToContentVersion", "compareContentVersion", "promoteContentVersion", "mainHash", "rest", "restConfig", "getOptions", "withOptions", "extraOptions", "withSearch", "withToken", "SEPARATOR", "mergePaths", "a", "b", "baseUrl", "path", "newPath", "k", "v", "k2", "v2", "memoryStorage", "store", "authentication", "authConfig", "refreshPromise", "refreshTimeout", "storage", "resetStorage", "activeRefresh", "refreshIfExpired", "authData", "_err", "setCredentials", "expires", "body", "err", "access_token", "staticToken", "_client", "auth", "creds", "pong", "messageCallback", "socket", "timeout", "resolve", "reject", "handler", "data", "message", "unbind", "abort", "timer", "generateUid", "uid", "defaultRealTimeConfig", "WebSocketState", "realtime", "config", "client", "reconnectAttempts", "reconnecting", "hasAuth", "withStrictAuth", "url", "currentClient", "token", "getSocketUrl", "newUrl", "resetConnection", "reconnect", "eventHandlers", "handleMessages", "ws", "access_token", "self", "resolved", "evt", "event", "callback", "updatedCallback", "collection", "options", "subscribed", "send", "obj", "subscriptionGenerator", "sleep", "delay"]
}
